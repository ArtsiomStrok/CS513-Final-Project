[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant name and/or location not given]",
          "Restaurant name and/or location not given]",
          "[Restaurant name and/or location not given] ",
          "Restaurant name and/or location not given",
          "[Restaurant name and/or location not given"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Imperial",
          "Imperial Hotel",
          "Impérial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Healy's Forty-second Street restaurant",
          "Healy's Forty-second Street Restaurant"
        ],
        "to": "Healys Forty-second Street restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Guffanti's Table d'Hôte",
          "Guffanti's Table d'Hôte "
        ],
        "to": "Guffantis Table d'Hôte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Not Given]",
          "[Not given]"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"Frederik VIII\"",
          "S.S. Frederik VIII"
        ],
        "to": "S.S. Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Hotel Fairmont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "South Ferry Hotel",
          " South Ferry Hotel"
        ],
        "to": "Hotel South Ferry"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-Plaza Hotel",
          "Hotel Copley-Plaza"
        ],
        "to": "Hotel Copley-Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis"
        ],
        "to": "Hotel St. Denis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Hotel Cosmopolitan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Hotel Palace"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel DuPont",
          "Hotel duPont"
        ],
        "to": "Hotel DuPont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough",
          "Hotel Marlborough "
        ],
        "to": "Hotel Marlborough"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel  Baltimore",
          "Hotel Baltimore"
        ],
        "to": "Hotel  Baltimore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Lunch Co.",
          "Mercantile lunch Co."
        ],
        "to": "Mercantile Lunch Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York (?)"
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lafayette Hotel",
          "Hotel Lafayette"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "Hotel The New Willard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants Club"
        ],
        "to": "Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Boulevard",
          "Cafe Boulevard"
        ],
        "to": "Cafe Boulevard"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-Life Building",
          "MetLife Building"
        ],
        "to": "MetLife Building"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"é\", \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"é\", \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(/[.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(/[.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"H?tel\", \"Hotel\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"H?tel\", \"Hotel\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Des Beaux Arts",
          "Cafe Des Beaux arts"
        ],
        "to": "Cafe Des Beaux Arts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Copley plaza",
          "Copley Plaza Hotel"
        ],
        "to": "Hotel Copley plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton",
          "Ritz carlton"
        ],
        "to": "Ritz Carlton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Stratford",
          "Bellevue stratford"
        ],
        "to": "Bellevue Stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton Hotel",
          "Ritz carlton Hotel"
        ],
        "to": "Ritz Carlton Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza",
          "Copley plaza"
        ],
        "to": "Hotel Copley plaza"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hof Brau Haus"
        ],
        "to": "Hof Brau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel La Salle",
          "Hotel Lasalle"
        ],
        "to": "Hotel La Salle"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aldine Club Rooma",
          "Aldine Club Rooms"
        ],
        "to": "Aldine Club Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Bellevue stratford",
          "The Bellvue stratford"
        ],
        "to": "The Bellevue stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young Mans Christian Association",
          "Young Mens Christian Association"
        ],
        "to": "Young Mens Christian Association"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf astoria: South Gate",
          "Waldorf astoria: Grand Ball Room"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Hotel Ponchartrain"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Horn & Hardart Company",
          "Horn & Hardart Company Dining Rooms"
        ],
        "to": "Horn & Hardart Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gutmanns Cafe And Restaurant",
          "Gutmanns Cafe And Restaurant Luncheon"
        ],
        "to": "Gutmanns Cafe And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wiehl & Widmann",
          "Wiehl & Widman"
        ],
        "to": "Wiehl & Widmann"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Joes Restaurant",
          "Jeos Restaurant"
        ],
        "to": "Joes Restaurant"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(/\\bThe\\b/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(/\\bThe\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ten Eyck",
          "Ten Eyck Hotel"
        ],
        "to": "Hotel Ten Eyck"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Willard",
          "New Willard Hotel"
        ],
        "to": "Hotel New Willard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Washington",
          "Washington Hotel"
        ],
        "to": "Hotel Washington"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Huether & Steffens",
          "Heuther & Steffens"
        ],
        "to": "Huether & Steffens"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Breevort",
          "Hotel Brevoort"
        ],
        "to": "Hotel Brevoort"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Greenhut Siegel Cooper Co",
          "Greehut Siegel Cooper Co"
        ],
        "to": "Greenhut Siegel Cooper Co"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hanover Lunch Co",
          "Hanover Lunch"
        ],
        "to": "Hanover Lunch Co"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/\\bThe\\b/, \"\")\nvalue.replace(\"H?tel\", \"Hotel\")\nvalue.replace(\"'\", \"\")\nvalue.replace(\"\\\"\", \"\")\nvalue.replace(\"é\", \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/\\bThe\\b/, \"\")\nvalue.replace(\"H?tel\", \"Hotel\")\nvalue.replace(\"'\", \"\")\nvalue.replace(\"\\\"\", \"\")\nvalue.replace(\"é\", \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[\\[\\]\\(\\)\\-{}\\?]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[\\[\\]\\(\\)\\-{}\\?]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  Antwerpen  Ny",
          "Red Star Line  Antwerpen Ny",
          "Red Star Line  Antwerpen ny",
          "Red Star Line antwerpen Ny",
          "Red Star Line Antwerpen Ny",
          "Red Star Line Antwerpen ny",
          "Red Star Line antwerpen  Ny",
          "Red Star Line antwerpen ny"
        ],
        "to": "Red Star Line Antwerpen NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd  Bremen",
          "Norddeutscher Lloyd Bremen;",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Engineer's Club",
          "Engineers Club",
          "Engineers' Club",
          "engineers Club"
        ],
        "to": "Engineers Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "fifth Avenue Hotel",
          "Fifth Avenue Hotel ",
          "Fifth Avenue Hotel;"
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd, Bremen",
          "Nordeutscher Lloyd  Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "Alta Vista Hotel ",
          "alta Vista Hotel"
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\liberté\\\"\"",
          "Paquebot Liberte",
          "Paquebot \\liberte\\\"\""
        ],
        "to": "Paquebot Liberte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\".\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\".\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F Langs Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker ",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "majestic Hotel",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial",
          "colonial Hotel"
        ],
        "to": "Hotel Colonial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line",
          "Red Star Line ",
          "red Star Line"
        ],
        "to": "Red Star Line "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants' Club",
          "Merchants Club"
        ],
        "to": "Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Denis Hotel",
          "Hotel St Denis",
          "St, Denis Hotel"
        ],
        "to": "Hotel St Denis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial Hotel",
          "Hotel Imperial",
          "Impérial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Grand Hôtel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editors' Association",
          "American Medical Editor's Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editors Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKobe Maru",
          "Nippon Yusen Kaisha sSKobe Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS American Shipper",
          "SS \"american Shipper\"\"\""
        ],
        "to": "S S American Shipper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKasuga",
          "Nippon Yusen Kaisha sSKasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company  Sonoma",
          "Oceanic Steamship Company _ Sonoma"
        ],
        "to": "Oceanic Steamship Company  Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wabash Railway Company",
          "Wabash railway Company"
        ],
        "to": "Wabash Railway Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Europäischer Hof",
          "Hotel Europaischer Hof"
        ],
        "to": "Hotel Europaischer Hof"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "Hotel De Lange"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Regis  Sheraton",
          "St Regis Sheraton"
        ],
        "to": "St Regis Sheraton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Riggs Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Frederik Viii",
          "king Frederik Viii"
        ],
        "to": "King Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  Sierra",
          "Oceanic Steamship Co Sierra"
        ],
        "to": "Oceanic Steamship Co  Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Francis Hotel",
          "Hotel St Francis"
        ],
        "to": "Hotel St Francis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Alexander Of Servia",
          "king Alexander Of Servia"
        ],
        "to": "King Alexander Of Servia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Association Of New York City",
          "hotel Association Of New York City"
        ],
        "to": "Hotel Association Of New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compagnie Generale Transatlantique",
          "Compagnie Générale Transatlantique"
        ],
        "to": "Compagnie Generale Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Muhlenkamper Fahrhaus",
          "Mühlenkamper Fährhaus"
        ],
        "to": "Muhlenkamper Fahrhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of Revolution In State Of Missouri",
          "Society Sons Of Revolution In State Of Missouri"
        ],
        "to": "Society Of Sons Of Revolution In State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  SSZealandia",
          "Oceanic Steamship Co SSZealandia"
        ],
        "to": "Oceanic Steamship Co  S S Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " Club",
          "club"
        ],
        "to": " Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Algazar",
          "Algazar Hotel"
        ],
        "to": "Hotel Algazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Hotel Fairmont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alcazar Hotel",
          "Hotel Alcazar"
        ],
        "to": "Hotel Alcazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Savarin",
          "Café Savarin"
        ],
        "to": "Cafe Savarin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Nicholas Hotel",
          "Hotel St Nicholas"
        ],
        "to": "Hotel St Nicholas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie",
          "Hamburg  Amerika Linie"
        ],
        "to": "Hamburg Amerika Linie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colombo Hotel",
          "Hotel Colombo"
        ],
        "to": "Hotel Colombo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "maharaja Of Baroda",
          "Maharaja Of Baroda"
        ],
        "to": "Maharaja Of Baroda"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Palace Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "La Crépe",
          "La Crêpe"
        ],
        "to": "La Crepe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company sSZealander",
          "Oceanic Steamship Company  SSZealander"
        ],
        "to": "Oceanic Steamship Company S S Zealander"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirates House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of Sons Of American Revolution",
          "Michigan Society Sons Of American Revolution"
        ],
        "to": "Michigan Society Of Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elk's Club",
          "Elks Club"
        ],
        "to": "Elks Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchants Club Of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Washington",
          "Washington Hotel"
        ],
        "to": "Hotel Washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriffs Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SSWesternland",
          "Red Star Line SSWesternland"
        ],
        "to": "Red Star Line  S S Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Minot",
          "Minot Hotel"
        ],
        "to": "Hotel Minot"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Thorndike",
          "Thorndike Hotel"
        ],
        "to": "Hotel Thorndike"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherrys"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorfastoria",
          "waldorfastoria"
        ],
        "to": "Waldorfastoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ten Eyck",
          "Ten Eyck Hotel"
        ],
        "to": "Hotel Ten Eyck"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Hotel Ambassador"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Hotel Bristol"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalders Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Private",
          "private"
        ],
        "to": "Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Hotel Algonquin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willards Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co  SSAthabasca",
          "Canadian Pacific Railway Co SSAthabasca"
        ],
        "to": "Canadian Pacific Railway Co S S Athabasca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Century Club",
          "century Club"
        ],
        "to": "Century Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Emperor Nicholas Ii",
          "emperor Nicholas Ii"
        ],
        "to": "Emperor Nicholas II"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Hotel Continental"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System",
          "new York Central System"
        ],
        "to": "New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Northern Steamship Company/great Northern Ry Line",
          "northern Steamship Company/great Northern Ry Line"
        ],
        "to": "Northern Steamship Company great Northern Ry Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "king Edward Vii"
        ],
        "to": "King Edward VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Regis Hotel",
          "Hotel St Regis"
        ],
        "to": "Hotel St Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "StRegis Hotel",
          "Hotel StRegis"
        ],
        "to": "Hotel St Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS",
          "Usms"
        ],
        "to": "USMS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Empire",
          "Empire Hotel"
        ],
        "to": "Hotel Empire"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS New York",
          "Usms New York"
        ],
        "to": "USMS New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\france\\\"\"",
          "Paquebot France"
        ],
        "to": "Paquebot France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Hotel Royal Palm"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "English Hotel Restaurant",
          "english Hotel Restaurant"
        ],
        "to": "English Hotel Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "Hotel George Washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RG",
          "Rg"
        ],
        "to": "RG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Club",
          "manhattan Club"
        ],
        "to": "Manhattan Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Hotel Columbia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS Oceanic",
          "Rms Oceanic"
        ],
        "to": "RMS Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe De Paris",
          "Café De Paris"
        ],
        "to": "Cafe De Paris"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "Club XIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of American Revolution",
          "Empire State Society Sons Of American Revolution"
        ],
        "to": "Empire State Society Of Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's"
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lüchow's Restaurant",
          "Luchow's Restaurant"
        ],
        "to": "Luchows Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS Parthia",
          "RMS \"parthia\"\"\""
        ],
        "to": "RMS Parthia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Lafayette",
          "Cafe Lafayette"
        ],
        "to": "Cafe Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial "
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS Minnetonka",
          "SS \"minnetonka\"\"\""
        ],
        "to": "S S Minnetonka"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Commodore Hotel",
          "Hotel Commodore"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "USMS St Louis"
        ],
        "to": "USMS St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyers Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Dome Of Four Seasons",
          "Le Dôme Of Four Seasons"
        ],
        "to": "Le Dome Of Four Seasons"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard Club",
          "harvard Club"
        ],
        "to": "Harvard Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Biltmore",
          "Biltmore Hotel"
        ],
        "to": "Hotel Biltmore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnells"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel Dangleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "union Club"
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS \"queen Mary\"\"\"",
          "RMS \\queen Mary\\\"\""
        ],
        "to": "RMS Queen Mary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Legation",
          "american Legation"
        ],
        "to": "American Legation"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Claremont",
          "Claremont Hotel"
        ],
        "to": "Hotel Claremont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Boulevard",
          "Café Boulevard"
        ],
        "to": "Cafe Boulevard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS \\mauretania\\\"\"",
          "RMS Mauretania"
        ],
        "to": "RMS Mauretania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In State Of New York",
          "Society Of Society Of Colonial Wars In State Of New York"
        ],
        "to": "Society Of Colonial Wars In State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS \"frederik Viii\"",
          "SS Frederik Viii"
        ],
        "to": "S S Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzie's Hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "king Umberto",
          "King Umberto"
        ],
        "to": "King Umberto"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Haakon Vii",
          "king Haakon Vii"
        ],
        "to": "King Haakon VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Promenade Café",
          "Cafe Promenade"
        ],
        "to": "Promenade Cafe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company  Sierra",
          "Oceanic Steamship Company sierra"
        ],
        "to": "Oceanic Steamship Company  Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS \"ile De France\"\"\"",
          "SS Ile De France"
        ],
        "to": "S S Ile De France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers Association",
          "Master Printers' Association"
        ],
        "to": "Master Printers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wärdshuset Stallmästaregarden",
          "Wärdshuset Stallmästaregården"
        ],
        "to": "Wardshuset Stallmastaregarden"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, Plaza",
          "Plaza Ballroom"
        ],
        "to": "Plaza Ballroom"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Hotel Grenoble"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard University",
          "harvard University"
        ],
        "to": "Harvard University"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "restaurant Name And/or Location Not Given",
          "Restaurant Name And/or Location Not Given"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Hotel Windsor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toyo Kisen Kaisha  Hong Kong Maru",
          "Toyo Kisen Kaisha hong Kong Maru"
        ],
        "to": "Toyo Kisen Kaisha  Hong Kong Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Chicago",
          "Merchants Club Of Chicago"
        ],
        "to": "Merchants Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Ave Hotel",
          "fifth Ave Hotel"
        ],
        "to": "Fifth Ave Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "Boston Albany Railroad New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Hotel Copley Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Society  Sons Of American Revolution",
          "Wisconsin Society Sons Of American Revolution"
        ],
        "to": "Wisconsin Society Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Guard Albany Zouave Cadets",
          "Albany Zouave Cadets  Old Guard"
        ],
        "to": "Old Guard Albany Zouave Cadets"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St George's Society",
          "St Georges Society"
        ],
        "to": "St Georges Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "Hotel San Remo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanleys"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bankers' Club Of Chicago",
          "Bankers Club Of Chicago"
        ],
        "to": "Bankers Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSNasuga",
          "Nippon Yusen Kaisha sSNasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Nasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Christian Ix Of Denmark",
          "king Christian Ix Of Denmark"
        ],
        "to": "King Christian IX Of Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friar's Club",
          "Friars' Club"
        ],
        "to": "Friars Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeteria  Lunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St George",
          "St George Hotel"
        ],
        "to": "Hotel St George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Café Chambord",
          "Le Cafe Chambord"
        ],
        "to": "Le Cafe Chambord"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  Sonoma",
          "Oceanic Steamship Co _ Sonoma"
        ],
        "to": "Oceanic Steamship Co  Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "Hotel York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Us Army  Subsistence Dept",
          "US Army  Subsistence Dept"
        ],
        "to": "US Army  Subsistence Dept"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "Hotel New Weston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copleyplaza Hotel",
          "Hotel Copleyplaza"
        ],
        "to": "Hotel Copleyplaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKinshin Maru",
          "Nippon Yusen Kaisha sSKinshin Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kinshin Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ponce De Leon Hotel",
          "Hotel Ponce De Leon"
        ],
        "to": "Hotel Ponce De Leon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Evelyn Restaurant",
          "Evelyn Restaurant;"
        ],
        "to": "Evelyn Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "american Line",
          "American Line"
        ],
        "to": "American Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Revelstoke",
          "Revelstoke Hotel"
        ],
        "to": "Hotel Revelstoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SS Kasuga",
          "Nippon Yusen Kaisha ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Patriarch's",
          "Patriarchs"
        ],
        "to": "Patriarchs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Roanoke",
          "Roanoke Hotel"
        ],
        "to": "Hotel Roanoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club",
          "union League Club"
        ],
        "to": "Union League Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Hotel Des Indes"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore"
        ],
        "to": "Hotel Baltimore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Westminster Hotel",
          "Hotel Westminster"
        ],
        "to": "Hotel Westminster"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS New York",
          "USS New York "
        ],
        "to": "USS New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Hotel Gallatin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicagoan, Kansas Cityan",
          "Kansas Cityan Chicagoan"
        ],
        "to": "Kansas Cityan Chicagoan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporter's Association",
          "New England Shorthand Reporters' Association"
        ],
        "to": "New England Shorthand Reporters Association"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Profile House And Hotel Vendome",
          "Hotel Vendome And Profile House"
        ],
        "to": "Hotel Vendome And Profile House"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SSFriesland",
          "Red Star Line Ss Friesland",
          "Red Star Liness Friesland"
        ],
        "to": "Red Star Line S S Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS Raleigh",
          "USSRaleigh",
          "USSSRaleigh"
        ],
        "to": "USS Raleigh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbrauhaus",
          "Hof Brau Haus"
        ],
        "to": "Hofbrauhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha S S Kobe Maru",
          "Nippon Yusen Kaisha  SS Kobe Maru",
          "Nipppon Yusen Kaisha  SS Kobe Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          "L"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Societa La Piemontese",
          "Societa'la Piemontese"
        ],
        "to": "Societa La Piemontese"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dupont",
          "Hotel Du Pont"
        ],
        "to": "Hotel Du Pont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AH Meyer Rathskeller",
          "AHMeyer Rathskeller"
        ],
        "to": "AH Meyer Rathskeller"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S S President Wilson",
          "SS President Wilson"
        ],
        "to": "S S President Wilson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevuestratford",
          "Bellevue  Stratford"
        ],
        "to": "Bellevue  Stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "United Air Lines",
          "United Airlines"
        ],
        "to": "United Airlines"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Andrew's Society Of State Of New York",
          "StAndrews Society Of State Of New York"
        ],
        "to": "St Andrews Society Of State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Flat Iron Resaurant And Cafe",
          "Flatiron Resaurant And Cafe"
        ],
        "to": "Flatiron Resaurant And Cafe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeterialunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza",
          "Copleyplaza"
        ],
        "to": "Copley Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "CieGle Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Stratford Hotel",
          "Bellevuestratford Hotel"
        ],
        "to": "Bellevue Stratford Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bundeshaus Restaurant",
          "Bundeshausrestaurant"
        ],
        "to": "Bundeshaus Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "British Schools And Universities Club Of New York",
          "Britishschools And Universities Club Of New York"
        ],
        "to": "British Schools And Universities Club Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS Amsterdam",
          "SSAmsterdam"
        ],
        "to": "SS Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St Patrick",
          "Friendly Sons Of StPatrick"
        ],
        "to": "Friendly Sons Of St Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co  SS Alberta",
          "Canadian Pacific Railway Co  SSAlberta"
        ],
        "to": "Canadian Pacific Railway Co S S Alberta"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Des Beaux Arts",
          "Café Des Beauxarts"
        ],
        "to": "Cafe Des Beaux Arts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cunard LinerMS Pavonia",
          "Cunard Line RMS Pavonia"
        ],
        "to": "Cunard Line RMS Pavonia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Round Table",
          "Roundtable"
        ],
        "to": "Round Table"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SS Southwark",
          "Red Star Line  SSSouthwark"
        ],
        "to": "Red Star Line S S Southwark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS San Francisco",
          "USSSan Francisco"
        ],
        "to": "USS San Francisco"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St George's Society Of New York",
          "StGeorge's Society Of New York"
        ],
        "to": "St Georges Society Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzies'hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York State Hotel Association",
          "Newyork State Hotel Association"
        ],
        "to": "New York State Hotel Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Business Men's League Of St Louis",
          "Business Men's League Of StLouis"
        ],
        "to": "Business Mens League Of St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pig N'whistle",
          "Pig'n Whistle"
        ],
        "to": "Pig N Whistle"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  Antwerpen new York",
          "Red Star Line Antwerpennew York"
        ],
        "to": "Red Star Line Antwerpen New York"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S S Wyoming",
          "USS Wyoming"
        ],
        "to": "USS Wyoming"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[.,]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[.,]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"\\\\\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"\\\\\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburgamerica Linie",
          "Hamburgamerika Line",
          "Hamburgamerican Line",
          "Hamburgamerica Line"
        ],
        "to": "Hamburg America Line"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutcher Lloyd Bremen",
          "Norddeutecher Lloyd Bremen",
          "Nordeutcher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compagnie General Transatlantique",
          "Compagnie Generale Transatlantique",
          "Compngnie General Transatlantique"
        ],
        "to": "Compagnie General Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorfastoria",
          "Walforf Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburgamerika Linie",
          "Hamburg Amerika Linie",
          "Hamburg Armerika Linie"
        ],
        "to": "Hamburg America Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutcher Lloyd Bremen",
          "Norddeutecher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mc Nell",
          "Smith & Mc Nells",
          "Smith & Mcnell"
        ],
        "to": "Smith & McNell"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line Antwerpen Ny",
          "Red Ster Line Antwerpen Ny",
          "Red Star Line Antwerpenny"
        ],
        "to": "Red Star Line Antwerpen NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Jcigar Leaf Tobacco Board Of Trade Of United States",
          "Cigar Leaf Tobacco Board Of Trade Of United States"
        ],
        "to": "Cigar Leaf Tobacco Board Of Trade Of United States"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hollandamerica Line",
          "Hollandamerican Line"
        ],
        "to": "Holland America Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wiehl & Widmann",
          "Wiehl & Widman"
        ],
        "to": "Wiehl & Widmann"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Hotel Nethrland"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usaarmy Transport Warren",
          "Usarmy Transport Warren"
        ],
        "to": "US Army Transport Warren"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Life Insurance Company",
          "New York Life Insuance Company"
        ],
        "to": "New York Life Insurance Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Flat Iron Restaurant",
          "Flatiron Restaurant"
        ],
        "to": "Flatiron Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rms Queen Elilzabeth 2",
          "Rms Queen Elizabeth 2"
        ],
        "to": "Rms Queen Elilzabeth 2"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dangleterre",
          "Hotel Dangeleterre"
        ],
        "to": "Hotel Dangleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usmsphiladelphia",
          "Usms Philadelphia"
        ],
        "to": "Usms Philadelphia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "State Department Special To Pandamerican Congress At City Of Mexico Pullman Car Service",
          "State Department Special To Panamerican Congress At City Of Mexico Pullman Car Service"
        ],
        "to": "State Department Special To Pandamerican Congress At City Of Mexico Pullman Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "B&o Blue Line",
          "B& O Blue Line"
        ],
        "to": "B&O Blue Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Poinciana",
          "Royal Ponciana"
        ],
        "to": "Royal Poinciana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ambassador",
          "Hotels Ambassador"
        ],
        "to": "Hotel Ambassador"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Manufacturing Jewlers And Silversmiths Association",
          "New England Manufacturing Jewelers And Silversmiths Association"
        ],
        "to": "New England Manufacturing Jewlers And Silversmiths Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Walforf Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel Restaurat And Ladies Grill Room",
          "Palace Hotel Restaurant And Ladies Grill Room"
        ],
        "to": "Palace Hotel Restaurat And Ladies Grill Room"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton",
          "Ritzcarlton"
        ],
        "to": "Ritz Carlton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Hotel Ponchartrain"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "First Panel Sheriffs Jury",
          "First Panel Sherfiffs Jury"
        ],
        "to": "First Panel Sheriffs Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bailey Catering Co",
          "Baily Catering Co"
        ],
        "to": "Bailey Catering Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "King Endward Vii"
        ],
        "to": "King Edward VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Great Northern System Dining Cars",
          "Great Northern System Dining Car"
        ],
        "to": "Great Northern System Dining Cars"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sphinx Club",
          "Sphnx Club"
        ],
        "to": "Sphinx Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Janssens Restaurant",
          "Jansens Restaurant"
        ],
        "to": "Janssens Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeuscher Lloyd Bremen",
          "Nordeutcher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Mcalpin",
          "Hotel Mc Alpin"
        ],
        "to": "Hotel Mcalpin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalders Natur Weinhaus",
          "Schwarzzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalders Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Stockholm Restaurants",
          "Stockholm Restaurant"
        ],
        "to": "Stockholm Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia University Restaurant",
          "Columbia University Restauant"
        ],
        "to": "Columbia University Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyds Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dobbeltskrue Postdampskibet",
          "Dobbelskrue Postdampskibet"
        ],
        "to": "Dobbeltskrue Postdampskibet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company Sierra",
          "Oceanic Sreamship Company Sierra"
        ],
        "to": "Oceanic Steamship Company Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Bankers Association",
          "Wisconsin Bankers Asociation"
        ],
        "to": "Wisconsin Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aw Dennett",
          "Awdennett"
        ],
        "to": "A W Dennett"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F Langs Ladies And Gents Lunch Room And Restaurant",
          "Edward F Langss Ladies And Gents Lunch Room And Restaurant"
        ],
        "to": "Edward F Langs Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss New Amsterdam",
          "Ss Niew Amsterdam"
        ],
        "to": "Ss New Amsterdam"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER",
          "[DINNER]",
          "(DINNER)",
          "DINNER;",
          "DINNER (?)",
          "DINNER(?)",
          "[DINNER?]",
          "(?DINNER?)",
          "DINNER,",
          "DINNER?",
          "[?DINNER?]",
          "[DINNER ?]"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH",
          "[LUNCH]",
          "(?LUNCH?)",
          "LUNCH;",
          "[LUNCH?]",
          "(LUNCH)",
          "LUNCH (?)",
          "LUNCH."
        ],
        "to": "LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST",
          "[BREAKFAST]",
          "BREAKFAST;",
          "BREAKFAST (?)",
          "BREAKFAST(?)",
          "[BREAKFAST ?]"
        ],
        "to": "BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "(DAILY MENU)",
          "DAILY MENU;",
          "[DAILY MENU?]",
          "[DAILY] MENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER",
          "SUPPER (?)",
          "SUPPER(?)",
          "SUPPER;"
        ],
        "to": "SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARTE DU JOUR",
          "(CARTE DU JOUR)",
          "CARTE DU JOUR;"
        ],
        "to": "CARTE DU JOUR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH & DINNER",
          "LUNCH; DINNER",
          "[?DINNER? - LUNCH?]"
        ],
        "to": "LUNCH & DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK-BREAKFAST",
          "FRUHSTUCK/BREAKFAST",
          "FRUHSTUCK/BREAKFAST;"
        ],
        "to": "BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, DINNER",
          "DAILY DINNER MENU",
          "DAILY MENU; DINNER"
        ],
        "to": "DAILY MENU DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A LA CARTE; DINNER",
          "DINNER A LA CARTE",
          "DINNER; A LA CARTE"
        ],
        "to": "A LA CARTE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH MENU",
          "DAILY MENU, LUNCH",
          "DAILY MENU; LUNCH"
        ],
        "to": "DAILY LUNCH MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH OR DINNER",
          "DINNER OR LUNCH",
          "LUNCH &/OR DINNER"
        ],
        "to": "LUNCH OR DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY DINNER",
          "ANNIVERSARY DINNER?",
          "ANNIVERSARY [DINNER]"
        ],
        "to": "ANNIVERSARY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN",
          "MITTAG-ESSEN",
          "MITTAGESSEN;"
        ],
        "to": "MITTAGESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP - LUNCHEON",
          "INSPECTION TRIP, LUNCHEON",
          "INSPECTION TRIP, LUNCHEON;"
        ],
        "to": "INSPECTION TRIP LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BANQUET AND RECEPTION",
          "RECEPTION AND BANQUET"
        ],
        "to": "BANQUET AND RECEPTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TABLE DHOTE DINNER",
          "DINNER TABLE DHOTE"
        ],
        "to": "TABLE DHOTE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AFTERNOON TEA",
          "AFTERNOON TEA ["
        ],
        "to": "AFTERNOON TEA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER - SECOND CABIN",
          "DINNER SECOND CABIN"
        ],
        "to": "DINNER SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, DINNER",
          "INSPECTION TRIP, DINNER;"
        ],
        "to": "INSPECTION TRIP DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN/DINNER",
          "MITTAGESSEN[DINNER]"
        ],
        "to": "MITTAGESSEN DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINE LIST",
          "WINE LIST;"
        ],
        "to": "WINE LIST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER,SECOND CABIN",
          "DINNER-SECOND CABIN"
        ],
        "to": "DINNER SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUNION",
          "[?REUNION?]"
        ],
        "to": "REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON TABLE DHOTE",
          "TABLE DHOTE LUNCHEON"
        ],
        "to": "LUNCHEON TABLE DHOTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST AND SUPPER",
          "SUPPER AND BREAKFAST"
        ],
        "to": "BREAKFAST AND SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEDDING",
          "WEDDING(?)"
        ],
        "to": "WEDDING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RECEPTION",
          "[RECEPTION]"
        ],
        "to": "RECEPTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTONS BIRTHDAY BANQUET",
          "BANQUET (WASHINGTONS BIRTHDAY?)"
        ],
        "to": "WASHINGTONS BIRTHDAY BANQUET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABEND-ESSEN",
          "ABENDESSEN"
        ],
        "to": "ABENDESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENU",
          "MENU;"
        ],
        "to": "MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL DINNER",
          "[ANNUAL DINNER?]"
        ],
        "to": "ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINER",
          "[DINER]"
        ],
        "to": "DINER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER TO ABOVE",
          "DINNER TO ABOVE;"
        ],
        "to": "DINNER TO ABOVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH;",
          "DAILY LUNCH"
        ],
        "to": "DAILY LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON A LA CARTE",
          "LUNCHEON, A LA CARTE"
        ],
        "to": "LUNCHEON A LA CARTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LINCOLNS BIRTHDAY DINNER",
          "DINNER, LINCOLNS BIRTHDAY"
        ],
        "to": "LINCOLNS BIRTHDAY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FIFTH ANNUAL DINNER",
          "DINNER, FIFTH ANNUAL"
        ],
        "to": "FIFTH ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK/LUNCH",
          "FRUHSTUCK-LUNCH"
        ],
        "to": "FRUHSTUCK LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, BREAKFAST",
          "DAILY BREAKFAST MENU"
        ],
        "to": "DAILY MENU BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, LUNCHEON",
          "DAILY LUNCHEON MENU"
        ],
        "to": "DAILY MENU LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PRIVATE DINNER",
          "[PRIVATE DINNER?]"
        ],
        "to": "PRIVATE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, BREAKFAST",
          "INSPECTION TRIP - BREAKFAST"
        ],
        "to": "INSPECTION TRIP BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN - DINNER",
          "MITTAGESSEN [DINNER]"
        ],
        "to": "MITTAGESSEN DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH-DINNER",
          "LUNCH;DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIDDAG/DINNER",
          "MIDDAG-DINNER"
        ],
        "to": "MIDDAG DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY BILL OF FARE",
          "DAILY BILL OF FARE;"
        ],
        "to": "DAILY BILL OF FARE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON",
          "[LUNCHEON]",
          "LUNCHEON;"
        ],
        "to": "LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH & DINNER",
          "LUNCH DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST (?) HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON",
          "BREAKFAST HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
        ],
        "to": "BREAKFAST HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER/DINER",
          "DINER/DINNER",
          "DINNER, DINER"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU LUNCHEON",
          "DAILY MENU,LUNCHEON"
        ],
        "to": "DAILY MENU LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEDDING DINNER",
          "(WEDDING)DINNER"
        ],
        "to": "WEDDING DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST - SECOND CABIN",
          "BREAKFAST-SECOND CABIN"
        ],
        "to": "BREAKFAST SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST,LUNCH & DINNER",
          "BREAKFAST; LUNCH; DINNER"
        ],
        "to": "BREAKFAST LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, SUPPER",
          "DAILY MENU,SUPPER"
        ],
        "to": "DAILY MENU SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER",
          "DINNNER"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DEJEUNER FOURCHETTE/LUNCHEON",
          "DEJEUNER FOURCHETTE/ LUNCHEON"
        ],
        "to": "DEJEUNER FOURCHETTE LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(DINNER DANCE)",
          "DINNER-DANCE"
        ],
        "to": "DINNER DANCE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOURTH OF JULY DINNER",
          "FOURTH OFJULY DINNER"
        ],
        "to": "FOURTH OF JULY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU DINNER",
          "DAILY MENU,DINNER"
        ],
        "to": "DAILY MENU DINNER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTONS BIRTHDAY",
          "WASHINGT0NS BIRTHDAY"
        ],
        "to": "WASHINGTONS BIRTHDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER",
          "SOUPER"
        ],
        "to": "SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON",
          "LINCHEON"
        ],
        "to": "LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH AND DINNER",
          "LUMCH AND DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THANKSGIVING DINNER",
          "THNAKSGIVING DINNER"
        ],
        "to": "THANKSGIVING DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHRISTMAS DINNER",
          "CHRISTMAS DINNR"
        ],
        "to": "CHRISTMAS DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER MENU",
          "SUPPER MEN"
        ],
        "to": "SUPPER MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP DINNER",
          "INSPECTION TRIP - DINER"
        ],
        "to": "INSPECTION TRIP DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST - A LA CARTE",
          "BREAKFAST ˆ LA CARTE"
        ],
        "to": "BREAKFAST A LA CARTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER ˆ LA CARTE",
          "DINNER-A LA CARTE"
        ],
        "to": "DINNER A LA CARTE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER A LA CARTE",
          "A LA CARTE DINNER"
        ],
        "to": "DINNER A LA CARTE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILY MENUS"
        ],
        "to": "DAILY MENU"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EIGHTH ANNUAL DINNER",
          "EIGHT ANNUAL DINNER",
          "EIGTH ANNUAL DINNER"
        ],
        "to": "EIGHTH ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU - 11;30 T0 3;00",
          "DAILY MENU - 11;30 TO 3;00",
          "DAILY MENU, TEA"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN",
          "MITAGESSEN",
          "MITTAGESEN"
        ],
        "to": "MITTAGESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL DINNER",
          "12 ANNUAL DINNER"
        ],
        "to": "ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH A LA CARTE",
          "LUNCH ˆ LA CARTE"
        ],
        "to": "LUNCH A LA CARTE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[;.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[;.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC POL",
          "POL SOC"
        ],
        "to": "SOC POL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COM",
          "COM}"
        ],
        "to": "COM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC",
          "SOC:"
        ],
        "to": "SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GOVT",
          "GOV'T"
        ],
        "to": "GOVT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY SINGLE HOST",
          "OTHER SINGLE HOST PRIVATE PARTY"
        ],
        "to": "OTHER PRIVATE PARTY SINGLE HOST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC COM",
          "COM SOC"
        ],
        "to": "SOC COM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PERSONAL",
          "OTHERPERSONAL"
        ],
        "to": "OTHER PERSONAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE HOSTS",
          "OTHER PRIVATE HOST",
          "OTHER PRIVATE HOSTESS"
        ],
        "to": "OTHER PRIVATE HOSTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL",
          "CMMERCIAL"
        ],
        "to": "COMMERCIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE INDIVIDUAL",
          "OTHER PRIVATE INDIVIDUAL HOST"
        ],
        "to": "OTHER PRIVATE INDIVIDUAL HOST"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER INDIVIDUAL",
          "PTHER INDIVIDUAL"
        ],
        "to": "OTHER INDIVIDUAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY",
          "OTHER PRIVATE PATY"
        ],
        "to": "OTHER PRIVATE PARTY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOREIGN",
          "FOREIGNEIGN"
        ],
        "to": "FOREIGN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE HOSTS",
          "OTHER TWO PRIVATE HOSTS"
        ],
        "to": "OTHER PRIVATE HOSTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY SINGLE HOST",
          "OTHER PRIVATE PARTY BY SINGLE HOST"
        ],
        "to": "OTHER PRIVATE PARTY SINGLE HOST"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(\"NULL\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(\"NULL\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC"
        ],
        "to": "SOCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COM"
        ],
        "to": "COMMERCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMM"
        ],
        "to": "COMMERCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EDUC"
        ],
        "to": "EDUCATIONAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILIT"
        ],
        "to": "MILITARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIL"
        ],
        "to": "MILITARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNKNOWN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[;.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[;.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[{}]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[{}]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER DAILY DATED MENU",
          "OTHER DATED DAILY MENU"
        ],
        "to": "OTHER DAILY DATED MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATRIOTIC HOLIDAY",
          "PATRIOTIC HOLIDAY HOLIDAY"
        ],
        "to": "PATRIOTIC HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECULAR HOLIDAY",
          "SECULAR HOLIDAY HOLIDAY"
        ],
        "to": "SECULAR HOLIDAY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILYMENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUNION",
          "RE UNION"
        ],
        "to": "REUNION"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "OTHER S0C",
          "OTHR SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "ANIVERSARY"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMPL",
          "C0MPL"
        ],
        "to": "COMPL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY COMP",
          "ANNIVERSARY/COMPL"
        ],
        "to": "ANNIVERSARY COMP"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NULL"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIV",
          "ANIV"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORTIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL",
          "AMNNUAL"
        ],
        "to": "ANNUAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER DAILY HOTEL MENU",
          "OTHEER DAILY HOTEL MENU"
        ],
        "to": "OTHER DAILY HOTEL MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "113 ANNIVERSARY"
        ],
        "to": "ANNIVERSARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATION",
          "OTHER COMMEMOATION"
        ],
        "to": "OTHER COMMEMORATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMOATIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER ANNIV",
          "0THER ANNIV"
        ],
        "to": "OTHER ANNIV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "0THER SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORATIE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "OHER SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER ANNIVERSARY",
          "OTHER ANNIVERARY"
        ],
        "to": "OTHER ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARYERSARY",
          "ANNIVERSARYESARY"
        ],
        "to": "ANNIVERSARYERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "0THER COMMEMORATIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECULAR HOLIDAY",
          "SECULAR HOLIDAYL"
        ],
        "to": "SECULAR HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER REUNION",
          "OTHER REUNTION"
        ],
        "to": "OTHER REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMEMOATIVE",
          "COMMEMORATIVE"
        ],
        "to": "COMMEMOATIVE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "ANNIVERSARYERSARY"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORATION"
        ],
        "to": "OTHER COMMEMORATIVE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[-.,;]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[-.,;]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toLowercase()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toLowercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/copy\\s*\\d+\\b/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/copy\\s*\\d+\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"o\", \"0\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"o\", \"0\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[il]/, \"1\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[il]/, \"1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[=\\/]/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[=\\/]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"s0ete\", \"soete\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"s0ete\", \"soete\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"(2 c0p1es)\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"(2 c0p1es)\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/1tem.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/1tem.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/0vers1.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/0vers1.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/thru.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/thru.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\" &2\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\" &2\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"_w0tm\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"_w0tm\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\" (3 c0p1es)\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\" (3 c0p1es)\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"ab\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"ab\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"ac\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"ac\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column keywords",
    "columnName": "keywords"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column language",
    "columnName": "language"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column page_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "page_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column dish_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dish_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/[\"&(){}?%#!\\/\\[\\]]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/[\"&(){}?%#!\\/\\[\\]]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/[.,'`]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/[.,'`]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(\":\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(\":\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(\";\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(\";\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(/[-_]/, '')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(/[-_]/, '')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ASTOR HOTEL NEW YORK NY",
          "HOTEL ASTOR NEW YORK NY"
        ],
        "to": "HOTEL ASTOR NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PFISTER MILWAUKEE WI",
          "PFISTER HOTEL MILWAUKEE WI"
        ],
        "to": "HOTEL PFISTER MILWAUKEE WI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO S NEW YORK CITY",
          "NEW YORK CITY DELMONICO S"
        ],
        "to": "DELMONICO S NEW YORK CITY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAVOY HOTEL NEW YORK NY",
          "HOTEL SAVOY NEW YORK NY"
        ],
        "to": "HOTEL SAVOY NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOURSE PHILADELPHIA PA",
          "PHILADELPHIA BOURSE PHILADELPHIA PA"
        ],
        "to": "BOURSE PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PLACE VIGER MONTREAL CANADA",
          "PLACE VIGER HOTEL MONTREAL CANADA"
        ],
        "to": "HOTEL PLACE VIGER MONTREAL CANADA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUESTRATFORD PHILADELPHIA PA",
          "BELLEVUESTRATFORD HOTEL PHILADELPHIA PA"
        ],
        "to": "HOTEL BELLEVUESTRATFORD PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAMERCY PARK HOTEL",
          "HOTEL GRAMERCY PARK"
        ],
        "to": "HOTEL GRAMERCY PARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARK ROW BLDG NY",
          "PARK ROW BLDG NY NY"
        ],
        "to": "PARK ROW BLDG NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL JEFFERSON ST LOUIS MO",
          "JEFFERSON HOTEL ST LOUIS MO"
        ],
        "to": "HOTEL JEFFERSON ST LOUIS MO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD WASHINGTON DC",
          "NEW WILLARD THE WASHINGTON DC"
        ],
        "to": "THE NEW WILLARD WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE PLAZA",
          "PLAZA THE"
        ],
        "to": "THE PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME NY",
          "VENDOME HOTEL NY"
        ],
        "to": "HOTEL VENDOME NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BRUNSWICK NY",
          "BRUNSWICK HOTEL NY"
        ],
        "to": "HOTEL BRUNSWICK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST DENIS HOTEL",
          "HOTEL ST DENIS"
        ],
        "to": "HOTEL ST DENIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARLBOROUGH NY",
          "MARLBOROUGH HOTEL NY"
        ],
        "to": "HOTEL MARLBOROUGH NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MAJESTIC PHILADELPHIA PA",
          "MAJESTIC HOTEL PHILADELPHIA PA"
        ],
        "to": "HOTEL MAJESTIC PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN NY",
          "MANHATTAN HOTEL NY"
        ],
        "to": "HOTEL MANHATTAN NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SCHENLEY PITTSBURGH PA",
          "SCHENLEY HOTEL PITTSBURGH PA"
        ],
        "to": "HOTEL SCHENLEY PITTSBURGH PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BRUNSWICK THE BOSTON MASS",
          "THE BRUNSWICK BOSTON MASS"
        ],
        "to": "THE BRUNSWICK BOSTON MASS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL GRAMERCY PARK 52 GRAMERCY PARK NORTH",
          "GRAMERCY PARK HOTEL HOTEL GRAMERCY PARK 52 GRAMERCY PARK NORTH"
        ],
        "to": "HOTEL GRAMERCY PARK 52 GRAMERCY PARK NORTH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ARGYLE THE NY",
          "THE ARGYLE NY"
        ],
        "to": "THE ARGYLE NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ZINZENDORF WINSTONSALEM NC",
          "ZINZENDORF HOTEL WINSTONSALEM NC"
        ],
        "to": "HOTEL ZINZENDORF WINSTONSALEM NC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE TEN EYCK ALBANY NY",
          "TEN EYCK THE ALBANY NY"
        ],
        "to": "THE TEN EYCK ALBANY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MAJESTIC",
          "MAJESTIC HOTEL"
        ],
        "to": "HOTEL MAJESTIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ASTOR",
          "ASTOR HOTEL"
        ],
        "to": "HOTEL ASTOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY NY",
          "SAVOY HOTEL NY"
        ],
        "to": "HOTEL SAVOY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE HOTEL PHILADELPHIA PA",
          "HOTEL BELLEVUE PHILADELPHIA PA"
        ],
        "to": "HOTEL BELLEVUE PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BRUNSWICK BOSTON MA",
          "BRUNSWICK HOTEL BOSTON MA"
        ],
        "to": "HOTEL BRUNSWICK BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL METROPOLE MANILA P I",
          "METROPOLE HOTEL MANILA P I"
        ],
        "to": "HOTEL METROPOLE MANILA P I"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANHATTAN HOTEL NEW YORK NY",
          "HOTEL MANHATTAN NEW YORK NY"
        ],
        "to": "HOTEL MANHATTAN NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARLBOROUGH NEW YORK NY",
          "MARLBOROUGH HOTEL NEW YORK NY"
        ],
        "to": "HOTEL MARLBOROUGH NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL CLUB PORTLAND OR",
          "PORTLAND COMMERCIAL CLUB PORTLAND OR"
        ],
        "to": "COMMERCIAL CLUB PORTLAND OR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WELLINGTON PROVIDENCE RI",
          "WELLINGTON THE PROVIDENCE RI"
        ],
        "to": "THE WELLINGTON PROVIDENCE RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK ATHLETIC CLUB",
          "NEW YORK ATHLETIC CLUB NEW YORK"
        ],
        "to": "NEW YORK ATHLETIC CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUE",
          "BELLEVUE HOTEL"
        ],
        "to": "HOTEL BELLEVUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST GEORGE NYACK NY",
          "ST GEORGE HOTEL NYACK NY"
        ],
        "to": "HOTEL ST GEORGE NYACK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CECIL HOTEL LONDON ENGLAND",
          "HOTEL CECIL LONDON ENGLAND"
        ],
        "to": "HOTEL CECIL LONDON ENGLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME BOSTON MA",
          "VENDOME HOTEL BOSTON MA"
        ],
        "to": "HOTEL VENDOME BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WILLARD WASHINGTON DC",
          "WILLARD HOTEL WASHINGTON DC"
        ],
        "to": "HOTEL WILLARD WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORF ASTORIA",
          "WALDORF ASTORIA THE"
        ],
        "to": "THE WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ARGYLE THE BROOKLYN NY",
          "THE ARGYLE BROOKLYN NY"
        ],
        "to": "THE ARGYLE BROOKLYN NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MARLBOROUGH HOTEL",
          "HOTEL MARLBOROUGH"
        ],
        "to": "HOTEL MARLBOROUGH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIAMI BISCAYNE BAY FLA",
          "MIAMI BAY BISCAYNE FLA"
        ],
        "to": "MIAMI BAY BISCAYNE FLA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE AUDITORIUM CHICAGO IL",
          "AUDITORIUM THE CHICAGO IL"
        ],
        "to": "THE AUDITORIUM CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST DENIS NY",
          "ST DENIS HOTEL NY"
        ],
        "to": "HOTEL ST DENIS NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TONTINE HOTEL NEW HAVEN CT",
          "NEW TONTINE HOTEL NEW HAVEN CT"
        ],
        "to": "NEW TONTINE HOTEL NEW HAVEN CT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY",
          "SAVOY HOTEL"
        ],
        "to": "HOTEL SAVOY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO S NY",
          "DELMONICOS NY",
          "DELMONICO SNY",
          "DELMONICO S N Y"
        ],
        "to": "DELMONICOS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO S NEW YORK NY",
          "DELMONICO S NEW YORK N Y",
          "DELMONICOS NEW YORK N Y",
          "DELMONICOS NEW YORK NY"
        ],
        "to": "DELMONICOS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASSAU N P BAHAMAS",
          "NASSAU NP BAHAMAS",
          "NASSAU NPBAHAMAS"
        ],
        "to": "NASSAU NP BAHAMAS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PUTINBAY ISLAND OH",
          "PUT IN BAY ISLAND OH",
          "PUTINBAYISLAND OH"
        ],
        "to": "PUTINBAY ISLAND OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE EXPRESSSTEAMER FURST BISMARCK",
          "ENROUTE EXPRESS STEAMER FURST BISMARCK",
          "ENROUTE EXPRESSSTEAMER FURST BISMARCK"
        ],
        "to": "ENROUTE EXPRESS STEAMER FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NARRAGANSETT PIER R I",
          "NARRAGANSETT PIER RI",
          "NARAGANSETT PIER RI"
        ],
        "to": "NARAGANSETT PIER RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL IROQUOIS BUFFALO NY",
          "HOTEL IROQUOIS BUFFALO N Y"
        ],
        "to": "HOTEL IROQUOIS BUFFALO NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH ST AND BROADWAY NEW YORK NY",
          "66TH ST AND BROADWAYNEW YORK NY"
        ],
        "to": "66TH ST AND BROADWAY NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SCHNELLDAMPFER EXPRESS STEAMER AUGUSTE VICTORIA",
          "EN ROUTE ABOARD SCHNELLDAMPFER EXPRESS STEAMER AUGUSTEVICTORIA"
        ],
        "to": "EN ROUTE ABOARD SCHNELLDAMPFER EXPRESS STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WHITE MOUNTAINS NH",
          "WHITE MOUNTAINS N H"
        ],
        "to": "WHITE MOUNTAINS NH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA NEW YORK NY",
          "WALDORF ASTORIA NEW YORK NY"
        ],
        "to": "WALDORFASTORIA NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORFASTORIA",
          "THE WALDORF ASTORIA"
        ],
        "to": "THE WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASSAU N P",
          "NASSAU NP"
        ],
        "to": "NASSAU NP"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSE",
          "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSER"
        ],
        "to": "EN ROUTE ABOARD DAMPFER FRIEDRICH DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R M S CAMPANIA",
          "RMS CAMPANIA"
        ],
        "to": "RMS CAMPANIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA THE NEW YORK NY",
          "WALDORF ASTORIA THE NEW YORK NY"
        ],
        "to": "WALDORFASTORIA THE NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S S NACOOCHEE",
          "SS NACOOCHEE"
        ],
        "to": "SS NACOOCHEE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY S NY",
          "SHERRYS NY"
        ],
        "to": "SHERRYS NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OCEAN HOUSE NEWPORT R I",
          "OCEAN HOUSE NEWPORT RI"
        ],
        "to": "OCEAN HOUSE NEWPORT RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MORELLO S NEW YORK N Y",
          "MORELLO S NEW YORK NY"
        ],
        "to": "MORELLOS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALACE HOTEL SAN FRANCISCO CA",
          "PALACE HOTEL SAN FRANCISCO CAL"
        ],
        "to": "PALACE HOTEL SAN FRANCISCO CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ARLINGTON WASHINGTON DC",
          "THE ARLINGTON WASHINGTON D C"
        ],
        "to": "THE ARLINGTON WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COCHRAN WASHINGTON D C",
          "HOTEL COCHRAN WASHINGTON DC"
        ],
        "to": "HOTEL COCHRAN WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KASUGA",
          "S S KASUGA"
        ],
        "to": "SS KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE STEAMER FURST BISMARCK",
          "ENROUTE STEAMER FURST BISMARCK"
        ],
        "to": "ENROUTE STEAMER FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KAISER WILHELM DER GROSSE",
          "S S KAISER WILHELM DER GROSSE"
        ],
        "to": "SS KAISER WILHELM DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS CITY OF PARA",
          "S S CITY OF PARA"
        ],
        "to": "SS CITY OF PARA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO S NEW YORK",
          "DELMONICOS NEW YORK"
        ],
        "to": "DELMONICOS NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R M S ETRURIA",
          "RMS ETRURIA"
        ],
        "to": "RMS ETRURIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS CITY OF RIO DE JANEIRO",
          "S S CITY OF RIO DE JANEIRO"
        ],
        "to": "SS CITY OF RIO DE JANEIRO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA NEW YORK",
          "WALDORF ASTORIA NEW YORK"
        ],
        "to": "WALDORFASTORIA NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS FRIESLAND",
          "S S FRIESLAND"
        ],
        "to": "SS FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE STEAMER AUGUSTE VICTORIA",
          "ENROUTE STEAMER AUGUSTE VICTORIA"
        ],
        "to": "EN ROUTE STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA HOTEL NEW YORK NY",
          "WALDORF ASTORIA HOTEL NEW YORK NY"
        ],
        "to": "WALDORF ASTORIA HOTEL NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHAMBERLIN S WASHINGTON D C",
          "CHAMBERLIN S WASHINGTON DC"
        ],
        "to": "CHAMBERLINS WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S S SOUTHWARK",
          "ENROUTE ABOARD S S SOUTHWARK"
        ],
        "to": "EN ROUTE ABOARD S S SOUTHWARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "STEAMSHIP KAISER WILHELM DER GROSSE",
          "STEAMSHIP KAISER WILHELM DER GROSSER"
        ],
        "to": "STEAMSHIP KAISER WILHELM DER GROSSER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DEL CAMPIDOGLIO NEW YORK NY",
          "HOTEL DEL CAMPIDOGLIO NEW YORK N Y"
        ],
        "to": "HOTEL DEL CAMPIDOGLIO NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINDSOR HOTEL NY",
          "WINDSOR HOTELNY"
        ],
        "to": "WINDSOR HOTEL NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS DORIC",
          "S S DORIC"
        ],
        "to": "SS DORIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALACE HOTEL DENVER COL",
          "PALACE HOTELDENVER COL"
        ],
        "to": "PALACE HOTEL DENVER COL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BWAY 63RD ST NY",
          "B WAY 63RD ST NY"
        ],
        "to": "BWAY 63RD ST NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R M S LUCANIA",
          "RMS LUCANIA"
        ],
        "to": "RMS LUCANIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S S FRIESLAND",
          "EN ROUTE ABOARD SS FRIESLAND"
        ],
        "to": "EN ROUTE ABOARD SS FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTON D C",
          "WASHINGTON DC"
        ],
        "to": "WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROOKLYN NY",
          "BROOKLYNNY"
        ],
        "to": "BROOKLYN NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "STEAMSHIP NORTH WEST",
          "STEAMSHIP NORTHWEST"
        ],
        "to": "STEAMSHIP NORTH WEST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S M S NEW YORK",
          "USMS NEW YORK"
        ],
        "to": "USMS NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COCHRAN WASHINGTON D C",
          "THE COCHRAN WASHINGTON DC"
        ],
        "to": "THE COCHRAN WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "YOUNG S HOTEL BOSTON MA",
          "YOUNGS HOTEL BOSTON MA"
        ],
        "to": "YOUNGS HOTEL BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ATLANTIC CITY NJ",
          "ATLANTIC CITY N J"
        ],
        "to": "ATLANTIC CITY NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS TRINIDAD",
          "S S TRINIDAD"
        ],
        "to": "SS TRINIDAD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S S ZEALANDIA",
          "SS ZEALANDIA"
        ],
        "to": "SS ZEALANDIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICO S",
          "DELMONICOS"
        ],
        "to": "DELMONICOS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANILA P I",
          "MANILA PI"
        ],
        "to": "MANILA PI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PINEHURST N C",
          "PINEHURST NC"
        ],
        "to": "PINEHURST NC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAYLOR S HOTEL JERSEY CITY N J",
          "TAYLOR S HOTEL JERSEY CITY NJ"
        ],
        "to": "TAYLOR S HOTEL JERSEY CITY NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PROVIDENCE RI",
          "PROVIDENCE R I"
        ],
        "to": "PROVIDENCE RI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SIXTYSIXTH STREET BROADWAY NEW YORK NY",
          "SIXTY SIXTH STREET BROADWAY NEW YORK NY"
        ],
        "to": "SIXTYSIXTH STREET BROADWAY NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LONG BEACH L I NY",
          "LONG BEACH LI NY"
        ],
        "to": "LONG BEACH LI NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH ST BWAY NY",
          "66TH ST B WAY NY"
        ],
        "to": "66TH ST BWAY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LAKEWOOD NJ",
          "LAKEWOOD N J"
        ],
        "to": "LAKEWOOD NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VICTORY PUTINBAY ISLAND LAKE ERIE OH",
          "HOTEL VICTORY PUTINBAYISLAND LAKE ERIE OH"
        ],
        "to": "HOTEL VICTORY PUTINBAY ISLAND LAKE ERIE OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS COPTIC",
          "S S COPTIC"
        ],
        "to": "SS COPTIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R M S ROTTERDAM",
          "RMSROTTERDAM"
        ],
        "to": "RMS ROTTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66 ST B WAY NY",
          "66 ST BWAY NY"
        ],
        "to": "66 ST BWAY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "117 WEST 34TH STREET NEW YORK NY",
          "117WEST 34TH STREET NEW YORK NY"
        ],
        "to": "117 WEST 34TH STREET NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS OCEANIC",
          "R M S OCEANIC"
        ],
        "to": "RMS OCEANIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "KRUEGER AUDITORIUM NEWARK NJ",
          "KRUEGER AUDITORIUM NEWARKNJ"
        ],
        "to": "KRUEGER AUDITORIUM NEWARK NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS WESTERNLAND",
          "S S WESTERNLAND"
        ],
        "to": "SS WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD S S WESTERNLAND",
          "ENROUTE ABOARD S S WESTERNLAND"
        ],
        "to": "EN ROUTE ABOARD SS WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PUTINBAYISLAND LAKE ERIE OH",
          "PUTINBAY ISLAND LAKE ERIE OH"
        ],
        "to": "PUTINBAY ISLAND LAKE ERIE OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF NY",
          "WALDORFNY"
        ],
        "to": "WALDORF NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD WASHINGTON DC",
          "THE NEW WILLARD WASHINGTON D C"
        ],
        "to": "THE NEW WILLARD WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NY",
          "N Y"
        ],
        "to": "NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA NY",
          "WALDORF ASTORIA NY"
        ],
        "to": "WALDORFASTORIA NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD EXPRESS STEAMER AUGUSTE VICTORIA",
          "ENROUTE ABOARD EXPRESSSTEAMER AUGUSTE VICTORIA"
        ],
        "to": "EN ROUTE ABOARD EXPRESS STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE",
          "ENROUTE"
        ],
        "to": "EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "R M S EMPRESS OF CHINA",
          "RMS EMPRESS OF CHINA"
        ],
        "to": "RMS EMPRESS OF CHINA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLORADO SPRINGS CO",
          "COLORADO SPRINGS COLO"
        ],
        "to": "COLORADO SPRINGS CO"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA NEW YORK",
          "WALDORFASTORIA",
          "WALDORFASTORIA NY",
          "WALDORF ASTORIA HOTEL NEW YORK NY",
          "WALDORFASTORIA NEW YORK CITY",
          "WALDORFASTORIA NEW YORK NY",
          "WALDORFASTORIA THE NEW YORK NY",
          "WALDORFASTORIA HOTEL",
          "WALDORF ASTORIA THE NY NY",
          "WALDORFASTORIA HOTEL THE NEW YORK NY"
        ],
        "to": "WALDORFASTORIA NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARLBOROUGH",
          "HOTEL MARLBOROUGH NEW YORK NY",
          "HOTEL MARLBOROUGH NY",
          "HOTEL MARLBOROUGH HOBOKEN NY",
          "HOTEL MARLBOROUGH NEW YORK",
          "HOTEL MARLBOROUGH NEW YORK CITY"
        ],
        "to": "HOTEL MARLBOROUGH NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MADISON SQUARE GARDEN",
          "MADISON SQUARE GARDEN NEW YORK CITY",
          "MADISON SQUARE GARDEN NEW YORK NY",
          "MADISON SQUARE CONCET HALL NEW YORK NY",
          "MADISON SQUARE GARDEN NY",
          "MADISON SQUARE GARDER NEW YORK"
        ],
        "to": "MADISON SQUARE GARDEN NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNION LEAGUE CLUB NEW YORK NY",
          "UNION LEAGUE CLUB",
          "UNION LEAGUE CLUB NY",
          "UNION LEAGUE CLUB 39TH STREET AND FIFTH AVENUE",
          "UNION LEAGUE CLUB CHICAGO ILL",
          "UNION LEAGUE CLUB NEW YORK"
        ],
        "to": "UNION LEAGUE CLUB NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BRUNSWICK NY",
          "HOTEL BRUNSWICK BOSTON MA",
          "HOTEL BRUNSWICK",
          "HOTEL BRUNSWICK NEW YORK",
          "HOTEL BRUNSWICK NEW YORK NY"
        ],
        "to": "HOTEL BRUNSWICK NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST AUGUSTINE FL",
          "ST AUGUSTINE FLA",
          "ST AAUGUSTINE FLA",
          "ST AUGUSTINE FLORIDA"
        ],
        "to": "ST AUGUSTINE FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALAIS ROYAL CHRISTIANIA NORWAY",
          "PALAIS ROYAL CHRISTIANIA NORWAY NOW OSLO",
          "PALAIS ROYAL CHRISTIANA",
          "PALAIS ROYAL CHRISTIANA NORWAY"
        ],
        "to": "PALAIS ROYAL CHRISTIANIA NORWAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "KONIGEN LUISE AT SEA",
          "KONIGEN LOUISE AT SEA",
          "KONIGIN LUISE AT SEA",
          "KONIGIN LUSE AT SEA"
        ],
        "to": "KONIGEN LUISE AT SEA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST DENIS HOTEL NEW YORK",
          "ST DENIS HOTEL NEW YORK CITY",
          "ST DENIS HOTEL NEW YORK NY",
          "ST DENIS HOTELNY"
        ],
        "to": "ST DENIS HOTEL NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS NEW YORK NY",
          "DELMONICOS NEW YORK",
          "DELMONICO S NEW YORK CITY",
          "DELMONIC0 S NEW YORK"
        ],
        "to": "DELMONICOS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND CENTRAL LUNCH ROOMS NEW YORK NY",
          "GRAND CENTRAL PALACE",
          "GRAND CENTRAL PALACE NEW YORK NY",
          "GRAND CENTRAL PALACE NYC"
        ],
        "to": "GRAND CENTRAL PALACE NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MADISON SQUARE NEW YORK",
          "MADISON SQUARE NY",
          "MADISON SQUARE NEW YORK CITY NY",
          "MADISON SQUARE NEW YORK NY"
        ],
        "to": "MADISON SQUARE NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUMMERVILLE S C",
          "SOMMERVILLE S C",
          "SUMERVILLE S C"
        ],
        "to": "SUMMERVILLE S C"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE WALDORF ASTORIA",
          "THE WALDORFASTORA",
          "THE WALDORFASTORIA NEW YORK"
        ],
        "to": "THE WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE AUDITORIUM CHICAGO IL",
          "THE AUDITORIUM CHICAGO ILL",
          "THE AUDITORIAUM CHICAGO IL"
        ],
        "to": "THE AUDITORIUM CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PORTLAND COMMERCIAL CLUB PORTLND OR",
          "PORTLAND COMMERICAL CLUB",
          "PORTLAND COMMERICAL CLUB PORTLAND OR"
        ],
        "to": "PORTLAND COMMERCIAL CLUB PORTLND OR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE BELLEVUE PHILADELPHIA PA",
          "THE BELLEVUE PHILDELPHIA PA",
          "THE BELLEVUE PHLADELPHIA PA"
        ],
        "to": "THE BELLEVUE PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ASTOR NEW YORK NY",
          "HOTEL ASTOR NEW YORK",
          "HOTEL ASTOR NEW YORK CITY"
        ],
        "to": "HOTEL ASTOR NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO IL",
          "CHICAGO ILL",
          "CHCAGO IL"
        ],
        "to": "CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN NY",
          "HOTEL MANHATTAN NEW YORK NY",
          "HOTEL MANHATTAN NEW YORK"
        ],
        "to": "HOTEL MANHATTAN NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WASHINGTON JERSEY CITY NJ",
          "HOTEL WASHINGTON",
          "HOTEL WASHINGTON JERSEY CITY"
        ],
        "to": "HOTEL WASHINGTON JERSEY CITY NJ"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "METROPOLITAN CLUB NEW YORK NY",
          "METROPOLITAN CLUB",
          "METROPOLITAN CLUB NY"
        ],
        "to": "METROPOLITAN CLUB NEW YORK NY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CINCINNATI OH",
          "CINCINNATI OHIO",
          "CINCINATI OHIO",
          "CINCINNATI 0H"
        ],
        "to": "CINCINNATI OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLEVELAND OH",
          "CLEVELAND OHIO",
          "CLEVELYAND OH"
        ],
        "to": "CLEVELAND OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NY",
          "NH"
        ],
        "to": "NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROME ITALY",
          "ROME ITALLY"
        ],
        "to": "ROME ITALY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLUMBUS OHIO",
          "COLUMBUS OH"
        ],
        "to": "COLUMBUS OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GIBRALTAR SPAIN",
          "GIBRALTER SPAIN"
        ],
        "to": "GIBRALTAR SPAIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SWITZERLAND",
          "SWIITZERLAND"
        ],
        "to": "SWITZERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "QUEEN CITY CLUB CINCINNATI OH",
          "QUEEN CITY CLUB CINCINNATI OHIO"
        ],
        "to": "QUEEN CITY CLUB CINCINNATI OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "JACKSONVILLE FL",
          "JACKSONVILLE FLA"
        ],
        "to": "JACKSONVILLE FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NASHVILLE TN",
          "NASHVILLE TENN"
        ],
        "to": "NASHVILLE TN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILAN ITALY",
          "MILANO ITALY"
        ],
        "to": "MILAN ITALY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KASUGA",
          "SS CASUGA"
        ],
        "to": "SS KASUGA"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression grel:value.replace(\"È\", \"E\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "grel:value.replace(\"È\", \"E\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE",
          "RN ROUTE",
          "ON ROUTE"
        ],
        "to": "EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUE PHILADELPHIA PA",
          "HOTEL BELLEVUE PHILADEPHIA PA",
          "HOTEL BELLVUE PHILADELPHIA PA"
        ],
        "to": "HOTEL BELLEVUE PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SCHNELLDAMPFER EXPRESS STEAMER AUGUSTE VICTORIA",
          "EN ROUTE ABOARD SCNELLDAMPFER EXPRESS STEAMER AUGUSTE VICTORIA",
          "EN ROUTE ABOARD SCHNELLDAMPMER EXPRESS STEAMER AUGUSTE VICTORIA"
        ],
        "to": "EN ROUTE ABOARD SCHNELLDAMPFER EXPRESS STEAMER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KAMAKURA MARU",
          "SS KAMKURA MARU"
        ],
        "to": "SS KAMAKURA MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SCHNELLDAMPFER AUGUSTE VICTORIA",
          "SHNELLDAMPFER AUGUSTE VICTORIA"
        ],
        "to": "SCHNELLDAMPFER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "137 E MADISON ST CHICAGO ILL",
          "137 E MADISON ST CHICAGO IL"
        ],
        "to": "137 E MADISON ST CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KONIGIN LUISE",
          "SS KONIGEN LUISE"
        ],
        "to": "SS KONIGIN LUISE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK",
          "NEW YOK"
        ],
        "to": "NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUDITORIUM HOTEL",
          "AUDITORIUM HOEL"
        ],
        "to": "AUDITORIUM HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLARK S NYC",
          "CLARK S NY"
        ],
        "to": "CLARKS NYC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LOS ANGELES CA",
          "LOS ANGELES CAL"
        ],
        "to": "LOS ANGELES CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ORLEANS LA",
          "NEW PRLEANS LA"
        ],
        "to": "NEW ORLEANS LA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ON BOARD S S AMERIKAS",
          "ON BOARD S S AMERIKA"
        ],
        "to": "ON BOARD S S AMERIKA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RN ROUTE",
          "ON ROUTE"
        ],
        "to": "EN ROUTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOEL FLANDERS",
          "HOTEL FLANDERS"
        ],
        "to": "HOTEL FLANDERS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ON BOARD S S KRONPRINZESSIN CECILE",
          "ON BOARD S S KRONPRINZESSIN CECILIE"
        ],
        "to": "ON BOARD S S KRONPRINZESSIN CECILIE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD FURST BISMARCK",
          "EN ROUTE ABOARD FUST BISMARCK"
        ],
        "to": "EN ROUTE ABOARD FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHATTANOOGA TN",
          "CHATTANOOGA TE"
        ],
        "to": "CHATTANOOGA TN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE STEAMER AUGUST VICTORIA",
          "EN ROUTE STEAMER AUGUSTE VICTORIA"
        ],
        "to": "EN ROUTE STEAMER AUGUST VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY NEW YORK NY",
          "HOTEL SAVOY NES YORK NY"
        ],
        "to": "HOTEL SAVOY NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUE PHILADELPHIA PA",
          "HOTEL BELLEVUE PHILADEPHIA PA"
        ],
        "to": "HOTEL BELLEVUE PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAMPA FL",
          "TAMPA FLA"
        ],
        "to": "TAMPA FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK CITY",
          "NEW YORK CIY"
        ],
        "to": "NEW YORK CITY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "METROPOLITAN HOTEL",
          "METOPOLITAN HOTEL"
        ],
        "to": "METROPOLITAN HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL IROQUOIS BUFFALO NY",
          "HOTEL IROGUOIS BUFFALO NY"
        ],
        "to": "HOTEL IROQUOIS BUFFALO NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAMPFER KONIGIN LUISE",
          "DAMPFER KONIGEN LUISE"
        ],
        "to": "DAMPFER KONIGEN LUISE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS",
          "DELMONICO"
        ],
        "to": "DELMONICOS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "POSTDAMFER GRAF WALDERSEE",
          "POSTDAMPFER GRAF WALDERSEE"
        ],
        "to": "POSTDAMFER GRAF WALDERSEE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALM BEACH FL",
          "PALM BEACH FLA"
        ],
        "to": "PALM BEACH FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CORONADO BEACH CA",
          "CORONADA BEACH CA"
        ],
        "to": "CORONADO BEACH CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MAJESTIC PHILADELPHIA PA",
          "HOEL MAJESTIC PHILADELPHIA PA"
        ],
        "to": "HOTEL MAJESTIC PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WATSON HOUSE BABLON L I N Y",
          "WATSON HOUSE BABYLON L I N Y"
        ],
        "to": "WATSON HOUSE BABYLON L I N Y"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUNSET OGDEN SHASTA ROUTES",
          "SUNSET OGDEN SHASTA ROUTE"
        ],
        "to": "SUNSET OGDEN SHASTA ROUTES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL GRAMERCY PARK 52 GRAMERCY PARK NORTH",
          "HOTEL GRAMERCY PARK 52 GAMERCY PARK NORTH"
        ],
        "to": "HOTEL GRAMERCY PARK 52 GRAMERCY PARK NORTH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS NEW YORK NY",
          "DELMONICO NEW YORK NY"
        ],
        "to": "DELMONICOS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "JAHRESZEITEN ECK",
          "JARESZEITEN ECK"
        ],
        "to": "JAHRESZEITEN ECK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AUGUSTA ME",
          "AUGUST ME"
        ],
        "to": "AUGUSTA ME"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS KOBE MARU",
          "EN ROUTE ABOARD SS KOHE MARU"
        ],
        "to": "EN ROUTE ABOARD SS KOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE RICHELIEU CHICAGO ILL",
          "THE RICHELIEU CHICAGO IL"
        ],
        "to": "THE RICHELIEU CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK NY",
          "NEW YOK NY"
        ],
        "to": "NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARK ROW NY",
          "PARK ROW NYC"
        ],
        "to": "PARK ROW NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND PACIFIC HOTEL CHICAGO IL",
          "GRAND PACIFIC HOTEL CHICAGO ILL"
        ],
        "to": "GRAND PACIFIC HOTEL CHICAGO IL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUESTRATFORD PHILADELPHIA PA",
          "BELLEVUESTATFORD PHILADELPHIA PA"
        ],
        "to": "BELLEVUESTRATFORD PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ATLANTIC HOTEL OCEAN CITY MD",
          "ATANTIC HOTEL OCEAN CITY MD"
        ],
        "to": "ATLANTIC HOTEL OCEAN CITY MD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PHILADEPHIA BOURSE",
          "PHILADELPHIA BOURSE"
        ],
        "to": "PHILADELPHIA BOURSE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ASHEVILLE NC",
          "ASHVILLE NC"
        ],
        "to": "ASHEVILLE NC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMOICO S NY",
          "DELMOMICO S NY"
        ],
        "to": "DELMOMICOS NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAOEMINA SICILY",
          "TAORMINA SICILY"
        ],
        "to": "TAORMINA SICILY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KAMAKURA MARU",
          "SS KAMAKUKRA MARU"
        ],
        "to": "SS KAMAKURA MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS KASUGA",
          "SS KASUPA"
        ],
        "to": "SS KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PANAMERICAN EXPOSITION",
          "PAN MERICAN EXPOSITION"
        ],
        "to": "PAN MERICAN EXPOSITION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS KASUGA",
          "EN ROUTE ABOARD SS KASUFA"
        ],
        "to": "EN ROUTE ABOARD SS KASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEN STENTON",
          "HOTEL STENTON"
        ],
        "to": "HOTEL STENTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "QUEBEC CANADA",
          "QUEBEN CANADA"
        ],
        "to": "QUEBEC CANADA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS FURST BISMARCK",
          "SS FURST BISMARK"
        ],
        "to": "SS FURST BISMARCK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOHEMIAN CLUB SAN FRANCISCO CA",
          "BOHEMIAN CLUB SAN FRANSISCO CA"
        ],
        "to": "BOHEMIAN CLUB SAN FRANCISCO CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HAVANA CUBA",
          "HABANA CUBA"
        ],
        "to": "HAVANA CUBA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD KRONPRINZESSIN CECILIE",
          "ABOARD KRONPRINSESSIN CECILIE"
        ],
        "to": "ABOARD KRONPRINZESSIN CECILIE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MURRAY HILL HOTEL NY",
          "MURRAY HILL HOTEL NYC"
        ],
        "to": "MURRAY HILL HOTEL NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL RYAN SO PAUL MINN",
          "HOTEL RYAN ST PAUL MINN"
        ],
        "to": "HOTEL RYAN ST PAUL MINN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "YOUNGS HOTEL BOSTON MA",
          "YOUNG S HOTEL BOSTON",
          "YOUNG S HOTEL BOSTON MASS"
        ],
        "to": "YOUNGS HOTEL BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIAMI BISCAYNE BAY FL",
          "MIAMI BAY BISCAYNE FLA",
          "MIAAMI BISCAYNE BAY FLA"
        ],
        "to": "MIAMI BISCAYNE BAY FL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABOARD PAQUEBOT LA LORRAINE",
          "ON BOARD PAQUEBOT LA LORRAINE",
          "ABOARD PAQUEBOT LA LORAINE"
        ],
        "to": "ABOARD PAQUEBOT LA LORRAINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFFMAN HOUSE NEW YORK NY",
          "HOFFMAN HOUSE THE NEW YORK NY",
          "HOFFMAN HOUSE CAFE NEW YORK NY"
        ],
        "to": "HOFFMAN HOUSE NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PALACE HOTEL DENVER COL",
          "BROWN PALACE HOTEL DENVER CO",
          "THE H C BROWN PALACE HOTEL DENVER COL"
        ],
        "to": "BROWN PALACE HOTEL DENVER CO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD WASHINGTON DC",
          "NEW WILLARD HOTEL WASHINGTON DC",
          "NEW WILLARD HOTEL THE WASHINGTON DC"
        ],
        "to": "THE NEW WILLARD HOTEL WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAN FRANCISCO COMMERICAL CLUB",
          "SAN FRANCISCO COMMERCIAL CLUB",
          "THE SAN FRANCISCO COMMERCIAL CLUB"
        ],
        "to": "SAN FRANCISCO COMMERICAL CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORFASTORIA NEW YORK NY",
          "WALDROFASTOIA NEW YORK",
          "WALDOFASTORIA NEW YORK"
        ],
        "to": "WALDORF ASTORIA NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ARLINGTON WASHINGTON DC",
          "THE ARLINGTON WASH DC",
          "THE ARLINGTON WASHINGTON"
        ],
        "to": "THE ARLINGTON WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DELMONICOS",
          "DELMONICO NY",
          "DELMONICO S NYC"
        ],
        "to": "DELMONICOS NYC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REPUBLICAN CLUB NEW YORK CITY",
          "REPUBLICAN CLUB NEW YORK",
          "REPUBLICAN CLUB NEW YORK NY"
        ],
        "to": "REPUBLICAN CLUB NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST NICHOLAS HOTEL CINCINNATI OH",
          "ST NICHOLAS CINCINNATI OH",
          "THE ST NICHOLAS CINCINNATI OH"
        ],
        "to": "ST NICHOLAS HOTEL CINCINNATI OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SCHNELLDAMPFER AUGUSTE VICTORIA",
          "SCHNELLDAMFERS AUGUSTE VICTORIA",
          "SCHNELLDAMPFERS AUGUST VICTORIA"
        ],
        "to": "SCHNELLDAMPFER AUGUSTE VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PORTLAND ME",
          "PORTLAND MA",
          "PORTLAND MAINE"
        ],
        "to": "PORTLAND ME"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW HAVEN CT",
          "NEW HAVEN CONN"
        ],
        "to": "NEW HAVEN CT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MERCHANTS CLUB",
          "MERCHANTS CLUB NY"
        ],
        "to": "MERCHANTS CLUB NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME BOSTON MA",
          "HOTEL VENDOME BOSTON MASS"
        ],
        "to": "HOTEL VENDOME BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS BARBAROSSA",
          "EN ROUTE ABOARD BARBAROSSA"
        ],
        "to": "EN ROUTE ABOARD SS BARBAROSSA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALBANY CLUB ALBANY NY",
          "ALBANY CLUB"
        ],
        "to": "ALBANY CLUB ALBANY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WORCESTER MA",
          "WORCESTER MASS"
        ],
        "to": "WORCESTER MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOSTON MA",
          "BOSTON MASS"
        ],
        "to": "BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW STATE HOUSE WACO TX",
          "NEW STATE HOUSE WACO TEXAS"
        ],
        "to": "NEW STATE HOUSE WACO TX"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MANHATTAN CLUB NEW YORK NY",
          "MANHATTAN CLUB NEW YORK CITY"
        ],
        "to": "MANHATTAN CLUB NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DEMOCRATIC CLUB NEW YORK",
          "DEMOCRATIC CLUB NEW YORK NY"
        ],
        "to": "DEMOCRATIC CLUB NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST NICHOLAS HOTEL CINCINNATI OH",
          "ST NICHOLAS HOTEL CINCINNATI OHIO"
        ],
        "to": "ST NICHOLAS HOTEL CINCINNATI OH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAN FRANCISCO CA",
          "SAN FRANCISCO CALIF"
        ],
        "to": "SAN FRANCISCO CA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FANEUIL HALL BOSTON MA",
          "FANEUIL HALL BOSTON MASS"
        ],
        "to": "FANEUIL HALL BOSTON MA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW WILLARD HOTEL WASHINGTON DC",
          "NEW WILLARD HOTEL THE WASHINGTON DC"
        ],
        "to": "NEW WILLARD HOTEL WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EN ROUTE ABOARD SS KOBE MARU",
          "EN ROUTE ABOARD SS K0BE MARU"
        ],
        "to": "EN ROUTE ABOARD SS KOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SHERRY S NEW YORK NY",
          "SHERRY S NEW YORK"
        ],
        "to": "SHERRYS NEW YORK NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MURRAY HILL HOTEL NEW YORK NY",
          "MURRAY HILL HOTEL THE NEW YORK NY"
        ],
        "to": "MURRAY HILL HOTEL NEW YORK NY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column place",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BLEECKER THOMPSON AND SULLIVAN STREETS NY",
          "BLEECKER THOMPSON AND SULLIVAN STREETS NEW YORK",
          "BLEECKER THOMPSON SULLIVAN STREETS NY",
          "BLEECKER THOMPSON AND SULLIVAN STREETS ENTRANCE ON BLEECKER STREET",
          "BLEECKER THOMPSON AND SULLIVAN STREETS"
        ],
        "to": "BLEECKER THOMPSON AND SULLIVAN STREETS NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BLEECKER THOMPSON AND SULLIVAN STREETS NY",
          "BLEECKER THOMPSON AND SULLIVAN STREETS NEW YORK",
          "BLEECKER THOMPSON AND SULLIVAN STREETS ENTRANCE ON BLEECKER STREET",
          "BLEECKER THOMPSON AND SULLIVAN STREETS"
        ],
        "to": "BLEECKER THOMPSON AND SULLIVAN STREETS NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BELLEVUESTRATFORD PHILADELPHIA PA",
          "THE BELLEVUESTRATFORD PHILADELPHIA PA",
          "BELLEVUESTRATFORD PHILADELPHIA PA",
          "STRATFORD PHILADELPHIA PA"
        ],
        "to": "HOTEL BELLEVUESTRATFORD PHILADELPHIA PA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD HOTEL WASHINGTON DC",
          "NEW WILLARD HOTEL WASHINGTON DC",
          "NEW WILLARD WASHINGTON DC"
        ],
        "to": "THE NEW WILLARD HOTEL WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAMPFER KAISER WILHELM DER GROSSE",
          "DAMPFER WILHELM DER GROSSE",
          "SCHNELLDAMPFER KAISER WILHELM DER GROSSE"
        ],
        "to": "DAMPFER KAISER WILHELM DER GROSSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE NEW WILLARD HOTEL WASHINGTON DC",
          "NEW WILLARD HOTEL WASHINGTON DC",
          "HOTEL WILLARD WASHINGTON DC"
        ],
        "to": "THE NEW WILLARD HOTEL WASHINGTON DC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "66TH STREET AND BROADWAY NY",
          "66TH STREET AND BR6ADWAY"
        ],
        "to": "66TH STREET AND BROADWAY NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MARKEL CAFE OMAHA NE",
          "MARKEL CAFE OMAHA NEBRASKA"
        ],
        "to": "MARKEL CAFE OMAHA NE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "METROPOLITAN OPERA HOUSE",
          "METROPOLITAN OPERA HOUSE NY"
        ],
        "to": "METROPOLITAN OPERA HOUSE NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PARKER HOUSE BOSTON MASS",
          "PARKER HOUSE BOSTON MA"
        ],
        "to": "PARKER HOUSE BOSTON MA"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant name and/or location not given]",
          "[Restaurant Name And/Or Location Not Given]",
          "Restaurant name and/or location not given]",
          "[Restaurant name and/or location not given] ",
          "Restaurant name and/or location not given",
          "[Restaurant name and/or location not given"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "not given",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant And/Or Location Not Given.]",
          "[Restaurant And/Or Location Not Given]"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Not Given]",
          "[Not given]"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/[\"&(){}?%#!\\/\\[\\];_\\-:]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/[\"&(){}?%#!\\/\\[\\];_\\-:]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(/[.,'`]/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "[^\\w\\s]",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(/[.,'`]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(\"\\\\\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "[^\\w\\s]",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(\"\\\\\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(\"È\", \"E\")",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "[^\\w\\s]",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(\"È\", \"E\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(\"\\\\\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(\"\\\\\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(\"É\", \"E\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(\"É\", \"E\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression grel:value.replace(\"É\", \"E\")",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "[^\\s\\w]",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "grel:value.replace(\"É\", \"E\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "engineConfig": {
      "facets": [
        {
          "name": "location",
          "columnName": "location",
          "query": "[^\\s\\w]",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAMERCY PARK HOTEL",
          "HOTEL GRAMERCY PARK",
          "GRAMERCY PARK HOTEL HOTEL GRAMERCY PARK"
        ],
        "to": "HOTEL GRAMERCY PARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL METROPOLE",
          "METROPOLE HOTEL"
        ],
        "to": "HOTEL METROPOLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DE LANGE HOTEL",
          "HOTEL DE LANGE"
        ],
        "to": "HOTEL DE LANGE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST FRANCIS HOTEL",
          "HOTEL ST FRANCIS"
        ],
        "to": "HOTEL ST FRANCIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIETY OF COLONIAL WARS IN THE STATE OF NEW YORK",
          "SOCIETY OF THE SOCIETY OF COLONIAL WARS IN THE STATE OF NEW YORK"
        ],
        "to": "SOCIETY OF COLONIAL WARS IN THE STATE OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DEL PRADO HOTEL",
          "HOTEL DEL PRADO"
        ],
        "to": "HOTEL DEL PRADO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MANHATTAN",
          "MANHATTAN HOTEL"
        ],
        "to": "HOTEL MANHATTAN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VICTORY",
          "VICTORY HOTEL"
        ],
        "to": "HOTEL VICTORY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL GRUNEWALD",
          "GRUNEWALD HOTEL"
        ],
        "to": "HOTEL GRUNEWALD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FAIRMONT HOTEL",
          "HOTEL FAIRMONT"
        ],
        "to": "HOTEL FAIRMONT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ALCAZAR",
          "ALCAZAR HOTEL"
        ],
        "to": "HOTEL ALCAZAR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST NICHOLAS HOTEL",
          "HOTEL ST NICHOLAS"
        ],
        "to": "HOTEL ST NICHOLAS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COLORADO",
          "COLORADO HOTEL"
        ],
        "to": "HOTEL COLORADO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "BREMEN NORDDEUTSCHER LLOYD"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COLOMBO",
          "COLOMBO HOTEL"
        ],
        "to": "HOTEL COLOMBO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MICHIGAN SOCIETY OF THE SONS OF THE AMERICAN REVOLUTION",
          "MICHIGAN SOCIETY SONS OF THE AMERICAN REVOLUTION"
        ],
        "to": "MICHIGAN SOCIETY OF THE SONS OF THE AMERICAN REVOLUTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECOND PANEL SHERIFFS JURY",
          "SHERIFFS JURY SECOND PANEL"
        ],
        "to": "SECOND PANEL SHERIFFS JURY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TAVERN ON THE GREEN",
          "THE TAVERN ON THE GREEN"
        ],
        "to": "THE TAVERN ON THE GREEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MINOT HOTEL",
          "HOTEL MINOT"
        ],
        "to": "HOTEL MINOT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "KEMPINSKI RESTAURANT",
          "RESTAURANT KEMPINSKI"
        ],
        "to": "RESTAURANT KEMPINSKI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL KNICKERBOCKER",
          "KNICKERBOCKER HOTEL"
        ],
        "to": "HOTEL KNICKERBOCKER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AMBASSADOR HOTEL",
          "HOTEL AMBASSADOR"
        ],
        "to": "HOTEL AMBASSADOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BRISTOL HOTEL",
          "HOTEL BRISTOL"
        ],
        "to": "HOTEL BRISTOL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COMMODORE HOTEL",
          "THE HOTEL COMMODORE"
        ],
        "to": "THE HOTEL COMMODORE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ALGONQUIN HOTEL",
          "HOTEL ALGONQUIN"
        ],
        "to": "HOTEL ALGONQUIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WORTHY",
          "WORTHY HOTEL"
        ],
        "to": "HOTEL WORTHY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MAJESTIC",
          "MAJESTIC HOTEL"
        ],
        "to": "HOTEL MAJESTIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND BALLROOM OF THE HOTEL PLAZA",
          "THE GRAND BALLROOM OF THE HOTEL PLAZA"
        ],
        "to": "THE GRAND BALLROOM OF THE HOTEL PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ASTOR",
          "ASTOR HOTEL"
        ],
        "to": "HOTEL ASTOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL CHAMBERLIN",
          "CHAMBERLIN HOTEL"
        ],
        "to": "HOTEL CHAMBERLIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CONTINENTAL HOTEL",
          "HOTEL CONTINENTAL"
        ],
        "to": "HOTEL CONTINENTAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLONIAL HOTEL",
          "HOTEL COLONIAL"
        ],
        "to": "HOTEL COLONIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST REGIS",
          "ST REGIS HOTEL"
        ],
        "to": "HOTEL ST REGIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL NETHERLAND",
          "NETHERLAND HOTEL"
        ],
        "to": "HOTEL NETHERLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "STREGIS HOTEL",
          "HOTEL STREGIS"
        ],
        "to": "HOTEL STREGIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VELVET",
          "VELVET HOTEL"
        ],
        "to": "HOTEL VELVET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIETY OF SONS OF THE REVOLUTION IN THE STATE OF MISSOURI",
          "SOCIETY SONS OF THE REVOLUTION IN THE STATE OF MISSOURI"
        ],
        "to": "SOCIETY SONS OF THE REVOLUTION IN THE STATE OF MISSOURI"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EMPIRE HOTEL",
          "HOTEL EMPIRE"
        ],
        "to": "HOTEL EMPIRE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROYAL PALM HOTEL",
          "HOTEL ROYAL PALM"
        ],
        "to": "HOTEL ROYAL PALM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GEORGE WASHINGTON HOTEL",
          "HOTEL GEORGE WASHINGTON"
        ],
        "to": "HOTEL GEORGE WASHINGTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COLUMBIA HOTEL",
          "HOTEL COLUMBIA"
        ],
        "to": "HOTEL COLUMBIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW GRAND HOTEL",
          "GRAND NEW HOTEL"
        ],
        "to": "NEW GRAND HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE HOTEL PLAZA",
          "THE PLAZA HOTEL"
        ],
        "to": "HOTEL PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "XIII CLUB",
          "CLUB XIII"
        ],
        "to": "XIII CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PLACE VIGER HOTEL",
          "HOTEL PLACE VIGER"
        ],
        "to": "HOTEL PLACE VIGER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL LAFAYETTE",
          "LAFAYETTE HOTEL"
        ],
        "to": "HOTEL LAFAYETTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EMPIRE STATE SOCIETY OF SONS OF THE AMERICAN REVOLUTION",
          "EMPIRE STATE SOCIETY SONS OF THE AMERICAN REVOLUTION"
        ],
        "to": "EMPIRE STATE SOCIETY OF SONS OF THE AMERICAN REVOLUTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PENNSYLVANIA",
          "PENNSYLVANIA HOTEL"
        ],
        "to": "HOTEL PENNSYLVANIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL SAVOY",
          "SAVOY HOTEL"
        ],
        "to": "HOTEL SAVOY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DENNIS",
          "DENNIS HOTEL"
        ],
        "to": "HOTEL DENNIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COMMODORE",
          "COMMODORE HOTEL"
        ],
        "to": "HOTEL COMMODORE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WINTHROP",
          "WINTHROP HOTEL"
        ],
        "to": "HOTEL WINTHROP"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PHONIX",
          "PHONIX HOTEL"
        ],
        "to": "HOTEL PHONIX"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL BILTMORE",
          "BILTMORE HOTEL"
        ],
        "to": "HOTEL BILTMORE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL JEFFERSON",
          "JEFFERSON HOTEL"
        ],
        "to": "HOTEL JEFFERSON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DANGLETERRE",
          "DANGLETERRE HOTEL"
        ],
        "to": "HOTEL DANGLETERRE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CLAREMONT HOTEL",
          "HOTEL CLAREMONT"
        ],
        "to": "HOTEL CLAREMONT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DEL CORONADO",
          "DEL CORONADO HOTEL"
        ],
        "to": "HOTEL DEL CORONADO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL CHAMPLAIN",
          "CHAMPLAIN HOTEL"
        ],
        "to": "HOTEL CHAMPLAIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL EASTMAN",
          "EASTMAN HOTEL"
        ],
        "to": "HOTEL EASTMAN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BALLROOM THE PLAZA",
          "THE PLAZA BALLROOM"
        ],
        "to": "THE PLAZA BALLROOM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST DENIS HOTEL",
          "HOTEL ST DENIS"
        ],
        "to": "HOTEL ST DENIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREVOORT RESTAURANT",
          "RESTAURANT BREVOORT"
        ],
        "to": "RESTAURANT BREVOORT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PROMENADE CAFE",
          "CAFE PROMENADE"
        ],
        "to": "CAFE PROMENADE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RESTAURANT MAYAN",
          "MAYAN RESTAURANT"
        ],
        "to": "RESTAURANT MAYAN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CASTLETON HOTEL",
          "HOTEL CASTLETON"
        ],
        "to": "HOTEL CASTLETON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK",
          "THE NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
        ],
        "to": "NEW ENGLAND SOCIETY IN THE CITY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRENOBLE HOTEL",
          "HOTEL GRENOBLE"
        ],
        "to": "HOTEL GRENOBLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINDSOR HOTEL",
          "HOTEL WINDSOR"
        ],
        "to": "HOTEL WINDSOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL NATIONAL",
          "NATIONAL HOTEL"
        ],
        "to": "HOTEL NATIONAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARIE ANTOINETTE",
          "MARIE ANTOINETTE HOTEL"
        ],
        "to": "HOTEL MARIE ANTOINETTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL QUISISANA",
          "QUISISANA HOTEL"
        ],
        "to": "HOTEL QUISISANA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY PLAZA HOTEL",
          "HOTEL COPLEY PLAZA"
        ],
        "to": "HOTEL COPLEY PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SAN REMO HOTEL",
          "HOTEL SAN REMO"
        ],
        "to": "HOTEL SAN REMO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "IMPERIAL HOTEL",
          "HOTEL IMPERIAL"
        ],
        "to": "HOTEL IMPERIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST GEORGE",
          "ST GEORGE HOTEL"
        ],
        "to": "HOTEL ST GEORGE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GRAND HOTEL ROYAL",
          "ROYAL GRAND HOTEL"
        ],
        "to": "GRAND HOTEL ROYAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PLAZA",
          "PLAZA HOTEL"
        ],
        "to": "HOTEL PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "YORK HOTEL",
          "HOTEL YORK"
        ],
        "to": "HOTEL YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ROYAL",
          "ROYAL HOTEL"
        ],
        "to": "HOTEL ROYAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME",
          "VENDOME HOTEL"
        ],
        "to": "HOTEL VENDOME"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CIE TRANSATLANTIQUE",
          "CIE CIE TRANSATLANTIQUE"
        ],
        "to": "CIE TRANSATLANTIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MARTINIQUE",
          "MARTINIQUE HOTEL"
        ],
        "to": "HOTEL MARTINIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL NEW WESTON",
          "NEW WESTON HOTEL"
        ],
        "to": "HOTEL NEW WESTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEYPLAZA HOTEL",
          "HOTEL COPLEYPLAZA"
        ],
        "to": "HOTEL COPLEYPLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VICTORIA",
          "VICTORIA HOTEL"
        ],
        "to": "HOTEL VICTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PONCE DE LEON",
          "PONCE DE LEON HOTEL"
        ],
        "to": "HOTEL PONCE DE LEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL PONTCHARTRAIN",
          "PONTCHARTRAIN HOTEL"
        ],
        "to": "HOTEL PONTCHARTRAIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL LEXINGTON",
          "LEXINGTON HOTEL"
        ],
        "to": "HOTEL LEXINGTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REVELSTOKE HOTEL",
          "HOTEL REVELSTOKE"
        ],
        "to": "HOTEL REVELSTOKE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROANOKE HOTEL",
          "HOTEL ROANOKE"
        ],
        "to": "HOTEL ROANOKE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DES INDES HOTEL",
          "HOTEL DES INDES"
        ],
        "to": "HOTEL DES INDES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BALTIMORE HOTEL",
          "HOTEL BALTIMORE"
        ],
        "to": "HOTEL BALTIMORE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL WESTMINSTER",
          "WESTMINSTER HOTEL"
        ],
        "to": "HOTEL WESTMINSTER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL STATLER",
          "STATLER HOTEL"
        ],
        "to": "HOTEL STATLER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL VENDOME AND PROFILE HOUSE",
          "PROFILE HOUSE AND HOTEL VENDOME"
        ],
        "to": "HOTEL VENDOME AND PROFILE HOUSE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GALLATIN HOTEL",
          "HOTEL GALLATIN"
        ],
        "to": "HOTEL GALLATIN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS RALEIGH",
          "USSRALEIGH",
          "USSSRALEIGH"
        ],
        "to": "USS RALEIGH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOFBRAU HAUS",
          "HOFBRAUHAUS",
          "HOF BRAU HAUS"
        ],
        "to": "HOFBRAU HAUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA SSKOBE MARU",
          "NIPPON YUSEN KAISHA SS KOBE MARU",
          "NIPPPON YUSEN KAISHA SS KOBE MARU"
        ],
        "to": "NIPPON YUSEN KAISHA SSKOBE MARU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOCIETA LA PIEMONTESE",
          "SOCIETALA PIEMONTESE"
        ],
        "to": "SOCIETA LA PIEMONTESE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DUPONT",
          "HOTEL DU PONT"
        ],
        "to": "HOTEL DUPONT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AH MEYER RATHSKELLER",
          "AHMEYER RATHSKELLER"
        ],
        "to": "AH MEYER RATHSKELLER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA SSKASUGA",
          "NIPPON YUSEN KAISHA SS KASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA SSKASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE SS FRIESLAND",
          "RED STAR LINE SSFRIESLAND"
        ],
        "to": "RED STAR LINE SS FRIESLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S S PRESIDENT WILSON",
          "SS PRESIDENT WILSON"
        ],
        "to": "SS PRESIDENT WILSON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE STRATFORD",
          "BELLEVUESTRATFORD"
        ],
        "to": "BELLEVUE STRATFORD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNITED AIR LINES",
          "UNITED AIRLINES"
        ],
        "to": "UNITED AIRLINES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESAURANT AND CAFE",
          "FLATIRON RESAURANT AND CAFE"
        ],
        "to": "FLATIRON RESAURANT AND CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COPLEY PLAZA",
          "COPLEYPLAZA"
        ],
        "to": "COPLEY PLAZA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CIE GLE TRANSATLANTIQUE",
          "CIEGLE TRANSATLANTIQUE"
        ],
        "to": "CIEGLE TRANSATLANTIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BELLEVUE STRATFORD HOTEL",
          "BELLEVUESTRATFORD HOTEL"
        ],
        "to": "BELLEVUE STRATFORD HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUNDESHAUS RESTAURANT",
          "BUNDESHAUSRESTAURANT"
        ],
        "to": "BUNDESHAUS RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS AMSTERDAM",
          "SSAMSTERDAM"
        ],
        "to": "SS AMSTERDAM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRIENDLY SONS OF ST PATRICK",
          "FRIENDLY SONS OF STPATRICK"
        ],
        "to": "FRIENDLY SONS OF ST PATRICK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO SS ALBERTA",
          "CANADIAN PACIFIC RAILWAY CO SSALBERTA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO SS ALBERTA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE SS SOUTHWARK",
          "RED STAR LINE SSSOUTHWARK"
        ],
        "to": "RED STAR LINE SS SOUTHWARK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS SAN FRANCISCO",
          "USSSAN FRANCISCO"
        ],
        "to": "USS SAN FRANCISCO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE ROUND TABLE",
          "THE ROUNDTABLE"
        ],
        "to": "THE ROUNDTABLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST GEORGES SOCIETY OF NEW YORK",
          "STGEORGES SOCIETY OF NEW YORK"
        ],
        "to": "ST GEORGES SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENZIES HOTEL",
          "MENZIESHOTEL"
        ],
        "to": "MENZIES HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BUSINESS MENS LEAGUE OF ST LOUIS",
          "BUSINESS MENS LEAGUE OF STLOUIS"
        ],
        "to": "BUSINESS MENS LEAGUE OF ST LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIGN WHISTLE",
          "PIG NWHISTLE"
        ],
        "to": "PIGN WHISTLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S S WYOMING",
          "USS WYOMING"
        ],
        "to": "USS WYOMING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK",
          "SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
        ],
        "to": "THE SOUTHERN BERKSHIRE SOCIETY OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ROGERSRESTAURANT",
          "ROGERS RESTAURANT"
        ],
        "to": "ROGERS RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CROMWELL STEAMSHIP COMPANY",
          "CROMWELLL STEAMSHIP COMPANY"
        ],
        "to": "CROMWELL STEAMSHIP COMPANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE SS WESTERNLAND",
          "RED STAR LINE SSWESTERNLAND"
        ],
        "to": "RED STAR LINE SS WESTERNLAND"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OD",
          "O D"
        ],
        "to": "OD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BO BLUE LINE",
          "B O BLUE LINE"
        ],
        "to": "BO BLUE LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST ANDREWS SOCIETY OF THE STATE OF NEW YORK",
          "STANDREWS SOCIETY OF THE STATE OF NEW YORK"
        ],
        "to": "ST ANDREWS SOCIETY OF THE STATE OF NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS ST PAUL",
          "USMSST PAUL"
        ],
        "to": "USMS ST PAUL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CANADIAN PACIFIC RAILWAY CO SSATHABASCA",
          "CANADIAN PACIFIC RAILWAY CO SS ATHABASCA"
        ],
        "to": "CANADIAN PACIFIC RAILWAY CO SSATHABASCA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL LA SALLE",
          "HOTEL LASALLE"
        ],
        "to": "HOTEL LA SALLE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH MCNELLS",
          "SMITH MC NELLS"
        ],
        "to": "SMITH MCNELLS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL MCALPIN",
          "HOTEL MC ALPIN"
        ],
        "to": "HOTEL MCALPIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NIPPON YUSEN KAISHA SSNASUGA",
          "NIPPON YUSEN KAISHA SS NASUGA"
        ],
        "to": "NIPPON YUSEN KAISHA SSNASUGA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S S NEW YORK",
          "USS NEW YORK"
        ],
        "to": "USS NEW YORK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S S FLORIDA",
          "USS FLORIDA"
        ],
        "to": "USS FLORIDA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PACIFIC MAIL STEAMSHIP COTRANS PACIFIC LINE",
          "PACIFIC MAIL STEAMSHIP CO TRANS PACIFIC LINE"
        ],
        "to": "PACIFIC MAIL STEAMSHIP CO TRANS PACIFIC LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS AMERICA",
          "SSAMERICA"
        ],
        "to": "SS AMERICA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT CAFE",
          "FLATIRON RESTAURANT CAFE"
        ],
        "to": "FLATIRON RESTAURANT CAFE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMSPHILADELPHIA",
          "USMS PHILADELPHIA"
        ],
        "to": "USMS PHILADELPHIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL ST REGIS",
          "HOTEL STREGIS"
        ],
        "to": "HOTEL ST REGIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER MENU S S VADERLAND MARCH 18TH 1910",
          "DINNER MENU SS VADERLAND MARCH 18TH 1910"
        ],
        "to": "DINNER MENU SS VADERLAND MARCH 18TH 1910"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON HOTEL",
          "RITZCARLTON HOTEL"
        ],
        "to": "RITZ CARLTON HOTEL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WALDORF ASTORIA",
          "WALDORFASTORIA"
        ],
        "to": "WALDORF ASTORIA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL CLUB OF ST LOUIS",
          "COMMERCIAL CLUB OF STLOUIS"
        ],
        "to": "COMMERCIAL CLUB OF ST LOUIS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE COBBLE STONES",
          "THE COBBLESTONES"
        ],
        "to": "THE COBBLE STONES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THE RENDEZ VOUS",
          "THE RENDEZVOUS"
        ],
        "to": "THE RENDEZ VOUS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS UNITED STATES",
          "S S UNITED STATES"
        ],
        "to": "SS UNITED STATES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RITZ CARLTON",
          "RITZCARLTON"
        ],
        "to": "RITZ CARLTON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ST LOUIS CLUB",
          "STLOUIS CLUB"
        ],
        "to": "ST LOUIS CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FLAT IRON RESTAURANT",
          "FLATIRON RESTAURANT"
        ],
        "to": "FLATIRON RESTAURANT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DOWN TOWN CLUB",
          "DOWNTOWN CLUB"
        ],
        "to": "DOWNTOWN CLUB"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RED STAR LINE ANTWERPEN NY",
          "RED STAR LINE ANTWERPENNY"
        ],
        "to": "RED STAR LINE ANTWERPEN NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS OCEANIC",
          "RMSOCEANIC"
        ],
        "to": "RMS OCEANIC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CUNARD STEAM SHIP COMPANY LIMITED",
          "CUNARD STEAMSHIP COMPANY LIMITED"
        ],
        "to": "CUNARD STEAM SHIP COMPANY LIMITED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SMITH MC NELL",
          "SMITH MCNELL"
        ],
        "to": "SMITH MCNELL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHICAGO STATIONERS ASSOCIATION",
          "CHICAGOS STATIONERS ASSOCIATION"
        ],
        "to": "CHICAGO STATIONERS ASSOCIATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AW DENNETT",
          "AWDENNETT"
        ],
        "to": "AW DENNETT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "IMPERIAL YACHT CLUB OF ST PETERSBURG",
          "IMPERIAL YACHT CLUB OF STPETERSBURG"
        ],
        "to": "IMPERIAL YACHT CLUB OF ST PETERSBURG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CAFE DES BEAUX ARTS",
          "CAFE DES BEAUXARTS"
        ],
        "to": "CAFE DES BEAUX ARTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL COPLEYPLAZA",
          "HOTEL COPLEY PLAZA"
        ],
        "to": "HOTEL COPLEYPLAZA"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HAMBURG AMERICA LINIE",
          "HAMBURG AMERIKA LINE",
          "HAMBURG AMERICAN LINE",
          "HAMBURG AMERICA LINE"
        ],
        "to": "HAMBURG AMERIKA LINE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDDEUTCHER LLOYD BREMEN",
          "NORDDEUTECHER LLOYD BREMEN",
          "NORDEUTCHER LLOYD BREMEN"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDDEUTCHER LLOYD BREMEN",
          "NORDDEUTECHER LLOYD BREMEN"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMPAGNIE GENERALE TRANSATLANTIQUE",
          "COMPAGNIE GENERAL TRANSATLANTIQUE",
          "COMPNGNIE GENERAL TRANSATLANTIQUE"
        ],
        "to": "COMPAGNIE GENERALE TRANSATLANTIQUE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDEUTSCHER LLOYD BREMEN",
          "NORDDEUTSCHER LLOYDS BREMEN"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEW YORK LIFE INSURANCE COMPANY",
          "NEW YORK LIFE INSUANCE COMPANY"
        ],
        "to": "NEW YORK LIFE INSURANCE COMPANY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDEUTSCHER LLOYD BREMEN"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "HOTEL DANGLETERRE",
          "HOTEL DANGELETERRE"
        ],
        "to": "HOTEL DANGLETERRE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          "L"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column location",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NORDDEUTSCHER LLOYD BREMEN",
          "NORDDEUTSCHER LLOYD BREMEN SSBARBAROSSA",
          "NORDDEUTSCHER LLOYD BREMEN LINE",
          "NORDDEUTSCHER LLOYD BREMAN",
          "NORDDEUTSCHER LLOYD BREMEN BARBAROSSA",
          "NORDDEUTSCHER LLOYD BREMEN AMERICA",
          "NORDDEUTSCHER LLOYD BREMEN AMERIKA"
        ],
        "to": "NORDDEUTSCHER LLOYD BREMEN"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression grel:value.replace(/[\"&(){}?%#!\\/\\[\\];_\\-:]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "grel:value.replace(/[\"&(){}?%#!\\/\\[\\];_\\-:]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression grel:value.replace(/[.,'`]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "grel:value.replace(/[.,'`]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column notes using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "notes",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "jython:import sys\nsys.path.append(r'/Users/astrok/jython2.7.2/Lib/site-packages/')\nfrom unidecode import unidecode\nreturn unidecode(value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_size at index 7 based on column physical_description using expression grel:value.partition(/[\\d.,]+\\s*[xX]\\s*[\\d.,]/)[1]",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_size",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:value.partition(/[\\d.,]+\\s*[xX]\\s*[\\d.,]/)[1]",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_size using expression grel:value.replace(\" \", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_size",
    "expression": "grel:value.replace(\" \", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_size using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_size",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_size using expression grel:value.replace(\",\", \".\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_size",
    "expression": "grel:value.replace(\",\", \".\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_size using expression grel:value.replace(\".X\", \"X\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_size",
    "expression": "grel:value.replace(\".X\", \"X\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column has_illustration at index 7 based on column physical_description using expression grel:if(value.contains(\"ILL\"),1, 0)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "has_illustration",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(\"ILL\"),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column column_structure at index 7 based on column physical_description using expression grel:if(value.contains(\"COL\"),1, 0)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "column_structure",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(\"COL\"),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/[\\d.,]+\\s*[xX]\\s*[\\d.,]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/[\\d.,]+\\s*[xX]\\s*[\\d.,]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/[.\\d]+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "\\d",
          "mode": "regex",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/[.\\d]+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"ILL\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"ILL\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"ILLUS\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"ILLUS\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\bCOL\\b/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\bCOL\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"LLUS\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"LLUS\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; US; ; ;",
          "FOLDER; US; ;",
          "FOLDER; ; US; ;",
          "FOLDER; US; ; ",
          "FOLDER; US; ",
          "FOLDER; US; ;;",
          "FOLDER; US;;",
          "FOLDER; ; US;",
          "FOLDER, US, , ",
          "FOLDER; US;; ;",
          "FOLDER; US;;;",
          "US. FOLDER",
          "FOLDER;; US;",
          "FOLDER, US; ;",
          "FOLDER; ; US; ",
          "FOLDER; US;",
          "FOLDER US.",
          "FOLDER US; ; ;",
          "FOLDER, . US. ;",
          "FOLDER,; US; ;",
          "FOLDER; ; US;;",
          "FOLDER; ;US;",
          "FOLDER; US ;",
          "FOLDER; US,; ;",
          "FOLDER; US;  ;",
          "FOLDER; US; . ;",
          "FOLDER; US; .;",
          "FOLDER; US; :",
          "FOLDER; US; ; ;.",
          "FOLDER; US; ; ;;",
          "FOLDER;; US.",
          "FOLDER;; US; ;"
        ],
        "to": "FOLDER;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD; US; ; ;",
          "CARD; US; ;",
          "CARD; ; US; ;",
          "CARD; US; ; ",
          "CARD; US; ;;",
          "CARD; ; US;",
          "CARD; US; ",
          "CARD, US; ; ;",
          "CARD; ; US; ",
          "CARD, US, , ",
          "CARD; US; ; ;;",
          "CARD; US ; ;",
          "CARD; US;;",
          "CARD US; ;",
          "CARD US; ; ;",
          "CARD' US; ;",
          "CARD, US, ",
          "CARD, US; ;",
          "CARD, US; ; ; ;",
          "CARD; ; US; //;",
          "CARD; US ;",
          "CARD; US; '",
          "CARD; US; , ;",
          "CARD; US; ,;",
          "CARD; US; ; /;",
          "CARD; US;; ",
          "CARD; US;; ;"
        ],
        "to": "CARD;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD; ;",
          "CARD;;;;",
          "CARD; ; ;",
          "CARD;;",
          "CARD;;;",
          "CARD; ",
          "CARD; ; ",
          "CARD;",
          "CARD; ; ; ;",
          "CARD, ",
          "CARD/;",
          "CARD;;;;;",
          "CARD",
          "CARD ",
          "CARD ;",
          "CARD, ; ;",
          "CARD: ;",
          "CARD; //;",
          "CARD; /;",
          "CARD; ; ; ",
          "CARD; ; ;  /",
          "CARD; ;;",
          "CARD;; ;",
          "CARD;;; /",
          "CARD;;;'"
        ],
        "to": "CARD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; ;",
          "FOLDER; ; ;",
          "FOLDER;;;;",
          "FOLDER;;",
          "FOLDER; ; ",
          "FOLDER;;;",
          "FOLDER; ",
          "FOLDER;",
          "FOLDER; ; ; ;",
          "FOLDER",
          "FOLDER; ; ; ",
          "FOLDER; ;;",
          "FOLDER;; ",
          "FOLDER, ",
          "FOLDER, ;",
          "FOLDER;  /",
          "FOLDER; /;",
          "FOLDER; ;  /;",
          "FOLDER; ; ,;",
          "FOLDER; ; .",
          "FOLDER; ; /;",
          "FOLDER;; /",
          "FOLDER;; //"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET; US; ; ;",
          "BOOKLET; US; ;",
          "BOOKLET; ; US; ;",
          "BOOKLET; US; ; ",
          "BOOKLET; US; ;;",
          "BOOKLET; US;;",
          "BOOKLET, US; ; ;",
          "BOOKLET; US;;;",
          "BOOKLET US;",
          "BOOKLET US; ;;",
          "BOOKLET US;;",
          "BOOKLET, US, , ",
          "BOOKLET; ; ; US;",
          "BOOKLET; ; US;",
          "BOOKLET; ; US; ",
          "BOOKLET; ;US; ;",
          "BOOKLET; US;",
          "BOOKLET; US; ",
          "BOOKLET; US; ;  ;",
          "BOOKLET; US; ; /;"
        ],
        "to": "BOOKLET;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; ;",
          "BROADSIDE; ; ;",
          "BROADSIDE;;",
          "BROADSIDE;;;;",
          "BROADSIDE; ",
          "BROADSIDE",
          "BROADSIDE; ;;",
          "BROADSIDE;;;",
          "BROADSIDE; ; ",
          "BROADSIDE;",
          "BROADSIDE, ",
          "BROADSIDE;  /",
          "BROADSIDE;  ;",
          "BROADSIDE; ;  ;",
          "BROADSIDE; ; ; ",
          "BROADSIDE; ; ; ;",
          "BROADSIDE;;?; //"
        ],
        "to": "BROADSIDE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; US; ; ;",
          "BROADSIDE; US; ;",
          "BROADSIDE; ; US; ;",
          "BROADSIDE; US;;",
          "BROADSIDE; ; US;",
          "BROADSIDE; US; ; ",
          "BROADSIDE; US; ",
          "BROADSIDE; US; ;;",
          "BROADSIDE; US;; ;",
          "BROADSIDE; US;;;",
          "US. BROADSIDE",
          "BROADSIDE; US ; ;",
          "BROADSIDE; US ;; ;",
          "BROADSIDE; US.",
          "BROADSIDE; US; ;  ;",
          "BROADSIDE;; US;"
        ],
        "to": "BROADSIDE;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET; ;",
          "BOOKLET; ; ;",
          "BOOKLET;;;;",
          "BOOKLET; ; ",
          "BOOKLET;;;",
          "BOOKLET;;",
          "BOOKLET; ",
          "BOOKLET",
          "BOOKLET, ",
          "BOOKLET; /",
          "BOOKLET; //",
          "BOOKLET; ; ,;",
          "BOOKLET; ; ; ",
          "BOOKLET;; /",
          "BOOKLET;; ;"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET;;",
          "BROADSHEET; ;",
          "BROADSHEET;",
          "BROADSHEET; ; ;",
          "BROADSHEET;;;",
          "BROADSHEET",
          "BROADSHEET;;;;",
          "BROADSHEET; ",
          "BROADSHEET, ;",
          "BROADSHEET; /;",
          "BROADSHEET; ; ; ;",
          "BROADSHEET; ;;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " IN. FOLD. ; .",
          " / IN FOLD ; ",
          " / / IN FOLD ;  ",
          " / / IN FOLD ; ",
          " / / IN FOLD",
          " IN. FOLD.",
          " / IN FOLD",
          " IN. FOLD. ; . .",
          " / IN FOLD ;  ",
          " IN., FOLD. ; .",
          " / / IN, FOLD ; ",
          " IN. FOLD.; . ."
        ],
        "to": "FOLD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;US;;;",
          "BOOKLET;US;;",
          "BOOKLET;US; ; ;",
          "BOOKLET;US; ;;",
          "BOOKLET;US; ;",
          "BOOKLET/US; ; ;",
          "BOOKLET;US;",
          "BOOKLET;US;'",
          "BOOKLET;US;; ;",
          "BOOKLET;US;;/;"
        ],
        "to": "BOOKLET;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US;;;",
          "FOLDER;US;;",
          "FOLDER;US; ;",
          "FOLDER;US; ; ;",
          "FOLDER;US; ;;",
          "FOLDER;US;; ;",
          "FOLDER'US; ;;",
          "FOLDER;US;",
          "FOLDER;US; ",
          "FOLDER;US;;;;"
        ],
        "to": "FOLDER;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; US; ;",
          "BROADSHEET; US; ; ;",
          "BROADSHEET; ; US; ;",
          "BROADSHEET; ; US;",
          "BROADSHEET; US; ",
          "BROADSHEET; US; ; ",
          "BROADSHEET US.",
          "BROADSHEET, US; ; ;",
          "BROADSHEET; ; ; US;",
          "BROADSHEET; ; US;;"
        ],
        "to": "BROADSHEET;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " IN.",
          " IN. ; .",
          " / IN",
          " / IN ; ",
          " / / IN",
          " / IN ;  ",
          " / / IN ;  ",
          " IN. ; . .",
          " / / IN ; "
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; EMBLEM; ;",
          "BROADSIDE; EMBLEM; ; ;",
          "BROADSIDE; EMBLEM;;",
          "BROADSIDE; EMBLEM ; ;",
          "BROADSIDE EMBLEM ; ;",
          "BROADSIDE EMBLEM; ;",
          "BROADSIDE;  EMBLEM; ;",
          "BROADSIDE; . EMBLEM; ;",
          "BROADSIDE; EMBLEM ;"
        ],
        "to": "BROADSIDE;EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;US;;;",
          "BROADSIDE;US;;",
          "BROADSIDE;US; ;",
          "BROADSIDE;US; ; ;",
          "BROADSIDE;US; ;;",
          "BROADSIDE;;US;",
          "BROADSIDE;US;",
          "BROADSIDE;US;; ;"
        ],
        "to": "BROADSIDE;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED; CM OPEN",
          "CM FOLDED;  CM OPEN",
          "CM FOLDED;  OPEN",
          " FOLDED; CM OPEN",
          " CM FOLDED; CM OPEN",
          " FOLDED;  CM OPEN",
          "CM FOLDED' CM OPEN",
          "CM FOLDED: CM OPEN"
        ],
        "to": "FOLDED;OPEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET; RIBBON TRIM; US; ; ;",
          "BOOKLET RIBBON TRIM; US; ; ;",
          "BOOKLET; RIBBON TRIM; US; ;",
          "BOOKLET; RIBBON TRIM; US;;",
          "BOOKLET; US; ; RIBBON TRIM;",
          "BOOKLET; US; ; RIBBON TRIM; ;",
          "BOOKLET; US; RIBBON TRIM; ;"
        ],
        "to": "BOOKLET;RIBBON TRIM;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; US COVER; ;",
          "FOLDER; US COVER; ; ;",
          "FOLDER US COVER; ;",
          "FOLDER US COVER; ; ;",
          "FOLDER; US COVER;; ;",
          "FOLDER; US, COVER;;",
          "FOLDER; US;  COVER; ;"
        ],
        "to": "FOLDER;US COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; US BORDER; ;",
          "BROADSIDE; US BORDER; ; ;",
          "BROADSIDE; US, BORDER; ;",
          "BROADSIDE; US BORDER;  ;",
          "BROADSIDE; US BORDER; ;;",
          "BROADSIDE; US. BORDER; ; ;"
        ],
        "to": "BROADSIDE;US BORDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD;US;;;",
          "CARD;US;;",
          "CARD;US; ; ;",
          "CARD;US;",
          "CARD;US; ; ",
          "CARD;US;/;"
        ],
        "to": "CARD;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD FOLDER; ; US; ;",
          "CARD FOLDER; US; ;",
          "CARD FOLDER; US; ; ;",
          "FOLDER; CARD; US; ;",
          "US; CARD FOLDER; ;"
        ],
        "to": "CARD FOLDER;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD; US; COLOR; ;",
          "CARD; ; US; COLOR;",
          "CARD; COLOR; US; ;",
          "CARD; US; COLOR ;;",
          "CARD; US; COLOR;"
        ],
        "to": "CARD;US;COLOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;  INCHES",
          "FOLDER  INCHES",
          "FOLDER;   INCHES",
          "FOLDER;  INCHES;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; HOTEL EMBLEM; ;",
          "BROADSIDE; HOTEL EMBLEM; ; ;",
          "BROADSIDE, HOTEL EMBLEM; ;",
          "BROADSIDE; HOTEL EMBLEM; ; "
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; EMBLEM; ;",
          "FOLDER; EMBLEM; ; ;",
          "FOLDER; EMBLEM;;",
          "FOLDER; EMBLEM;;;"
        ],
        "to": "FOLDER;EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET RIBBON TRIM;;",
          "BOOKLET; ; RIBBON TRIM; ;",
          "BOOKLET; RIBBON TRIM; ;",
          "BOOKLET; RIBBON TRIM; ; ;"
        ],
        "to": "BOOKLET;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; USCOVER; ; ;",
          "FOLDER USCOVER; ; ;",
          "FOLDER USCOVER; ;;",
          "FOLDER; USCOVER;; ;"
        ],
        "to": "FOLDER;US;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED",
          "CM FOLDED; CM",
          "CM FOLDED; ",
          "CM FOLDED; CM FOLDED"
        ],
        "to": "FOLDED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET;US;;",
          "BROADSHEET;US;;;",
          "BROADSHEET;US; ; ;",
          "BROADSHEET;US, ;;"
        ],
        "to": "BROADSHEET;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOL; US; ;",
          "FOL; ; US; ;",
          "FOL; US;  /;",
          "FOL; US; ;;"
        ],
        "to": "FOL;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " / IN ;  P",
          " / / IN ;  P",
          " IN ;  P, "
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; PHOTO; ;",
          "BROADSIDE; PHOTO; ; ;",
          "BROADSIDE; PHOTO;;;"
        ],
        "to": "BROADSIDE;PHOTO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; US; COLOR; ;",
          "FOLDER; COLOR; US; ;",
          "FOLDER; COLOR; US.;;"
        ],
        "to": "FOLDER;US;COLOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER HOTEL EMBLEM; ; ;",
          "FOLDER; HOTEL EMBLEM; ;",
          "FOLDER; HOTEL EMBLEM; ; ;"
        ],
        "to": "FOLDER;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;  INCHES; LAMINATED",
          "FOLDER;  INCHES LAMINATED",
          "LAMINATED FOLDER,  INCHES"
        ],
        "to": "FOLDER;LAMINATED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; HOTEL EMBLEM; ; ;",
          "BROADSHEET; HOTEL EMBLEM; ;",
          "BROADSHEET; HOTEL EMBLEM;;"
        ],
        "to": "BROADSHEET;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM",
          " CM"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "\" X \"",
          "X"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE, PAPER,  INCHES",
          "BROADSIDE; PAPER;  INCHES"
        ],
        "to": "BROADSIDE;PAPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD; COLOR; ;",
          "CARD; ; COLOR; ;"
        ],
        "to": "CARD;COLOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;EMBLEM; ;",
          "BROADSIDE;EMBLEM;;;"
        ],
        "to": "BROADSIDE;EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;  PAGES",
          "BOOKLET; PAGES;;"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOL; ;",
          "FOL;;"
        ],
        "to": "FOL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; U; ;",
          "FOLDER; U; ; ;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "US.;BROADSIDE",
          "US.BROADSIDE"
        ],
        "to": "BROADSIDE;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; PHOTOGRAPH; ; ;",
          "BROADSIDE; PHOTOGRAPH;;"
        ],
        "to": "BROADSIDE;PHOTOGRAPH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED; CM OPEN / INSERT IS CM",
          "CM FOLDED; CM OPEN; INSERT IS CM"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; US JAPANESE COUNTRY; ; ;",
          "BROADSHEET; US, JAPANESE COUNTRY; ; ;"
        ],
        "to": "BROADSHEET;US;JAPANESE COUNTRY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " BROADSIDES",
          "BROADSIDES (); ;"
        ],
        "to": " BROADSIDES"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD; U; ; ;",
          "CARD; U; ;"
        ],
        "to": "CARD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " PIECES; FOLDER,  INCHES; FOLDER;  INCHES",
          "PIECES; FOLDER,  INCHES; FOLDER,  INCHES; FOLDER,  INCHES"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED;  OPEN; INSERT MEASURES CM",
          "CM FOLDED; CM OPEN; INSERT MEASURES CM FOLDED; CM OPEN"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "US.;FOLDER",
          "US.FOLDER"
        ],
        "to": "FOLDER;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM; CM OPEN",
          "CM OPEN;  OPEN"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;RIBBON TRIM;;",
          "BOOKLET;;RIBBON TRIM;;"
        ],
        "to": "BOOKLET;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; CLUB EMBLEM; ;",
          "BROADSIDE; CLUB EMBLEM;;"
        ],
        "to": "BROADSIDE;CLUB EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;FLAG US; ;;",
          "FOLDER;FLAG US;;;"
        ],
        "to": "FOLDER;FLAG US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADIDE; US; ;",
          "BROADIDE; US; ; ;"
        ],
        "to": "BROADSIDE;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;FLAG US; ; ;",
          "BOOKLET;FLAG US; ;;"
        ],
        "to": "BOOKLET;FLAG US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;  INCHES",
          "BOOKLET  INCHES"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;  CM",
          "FOLDER; ;  CM"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; US; ; RIBBON TRIM; ;",
          "FOLDER; RIBBON TRIM; US; ; ;"
        ],
        "to": "FOLDER;US;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOK; ; ",
          "BOOK;;"
        ],
        "to": "BOOK "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; CARD; ;",
          "CARD; BROADSIDE; ;"
        ],
        "to": "BROADSIDE;CARD;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; ; COLOR; ",
          "FOLDER; COLOR;;"
        ],
        "to": "FOLDER;COLOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; FLAG EMBLEM; ;",
          "BROADSIDE; FLAG EMBLEM;;"
        ],
        "to": "BROADSIDE;FLAG EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED;  OPEN; DIGITIZE COPY ",
          "CM FOLDED; CM OPEN; DIGITIZE COPY "
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; FLAG US; ;",
          "BROADSIDE; FLAG US; ;;"
        ],
        "to": "BROADSIDE;FLAG US; ;"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; US BORDER; ; ;",
          "FOLDER; US BORDER;;"
        ],
        "to": "FOLDER;US;BORDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARDS; ; US; ;",
          "CARDS; US; ; ;"
        ],
        "to": "CARDS;US"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US;COVER",
          "FOLDER;USCOVER; ;"
        ],
        "to": "FOLDER;US;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;HOTEL EMBLEM",
          "BROADSIDE;HOTEL EMBLEM;;"
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US COVER",
          "FOLDER;US COVER;;"
        ],
        "to": "FOLDER;US COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;EMBLEM",
          "FOLDER;EMBLEM;;;"
        ],
        "to": "FOLDER;EMBLEM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;US;RIBBON TRIM;;",
          "BOOKLET; US;RIBBON TRIM; ;",
          "BOOKLET;US; ; RIBBON TRIM; ;"
        ],
        "to": "BOOKLET;US;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDED;OPEN",
          " FOLDED;  OPEN"
        ],
        "to": "FOLDED;OPEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US;COVER",
          "FOLDER;US COVER"
        ],
        "to": "FOLDER;US;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; US JAPANESE CHILDREN IN COLOR; ;",
          "BROADSHEET; USJAPANESE CHILDREN IN COLOR; ;"
        ],
        "to": "BROADSHEET;US JAPANESE CHILDREN IN COLOR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US;BORDER",
          "FOLDER'US BORDER;;"
        ],
        "to": "FOLDER;US;BORDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; GOLD TRIM; ;",
          "BROADSIDE;GOLD TRIM;;"
        ],
        "to": "BROADSIDE;GOLD TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; GOLD EMBLEM;;",
          "BROADSIDE;GOLD EMBLEM;;"
        ],
        "to": "BROADSIDE;GOLD EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET; RED RIBBON TRIM; ; ;",
          "BOOKLET;RED RIBBON TRIM;;"
        ],
        "to": "BOOKLET;RED RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;RIBBON TRIM;US",
          "BOOKLET;RIBBON TRIM; US; ; ;"
        ],
        "to": "BOOKLET;RIBBON TRIM;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;LAMINATED",
          "FOLDER; ; LAMINATED"
        ],
        "to": "FOLDER;LAMINATED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;US BORDER",
          "BROADSIDE; USBORDER; ; ;"
        ],
        "to": "BROADSIDE;US BORDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER; LUS; ;",
          "FOLDERL US; ;"
        ],
        "to": "FOLDER;US;"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US",
          "FOLDER;US;"
        ],
        "to": "FOLDER;US"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CM FOLDED;CM OPEN",
          "CM FOLDED; CCM OPEN",
          "CM FOLDED; CM OPEEN",
          "CM FOLDED; CM OPN"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;US",
          "BOKKLET; US; ;",
          "BOKLET;US; ; ;",
          "BOOKLET; O;;IS; ; ;"
        ],
        "to": "BOOKLET;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;US",
          "FILDER; US;;;",
          "FOLDR; US; ; ;"
        ],
        "to": "FOLDER;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD;US",
          "CARD; S; ;"
        ],
        "to": "CARD;US"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD",
          "CAARD;;;"
        ],
        "to": "CARD"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\bCM\\b/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\bCM\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/TRATION/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/TRATION/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"#N/A\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"#N/A\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "XM FOLDED; OPEN"
        ],
        "to": "FOLDED;OPEN"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"NCHES\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"NCHES\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_us at index 7 based on column physical_description using expression grel:if(value.contains(/\\bUS\\b/),1, 0)",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_us",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(/\\bUS\\b/),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\bUS\\b/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\bUS\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_color at index 7 based on column physical_description using expression grel:if(value.contains(/\\bCOLOR\\b/),1, 0)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_color",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(/\\bCOLOR\\b/),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\bCOLOR\\b/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\bCOLOR\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET;",
          "BROADSHEET",
          "BROADSHEET; ; ; ;",
          "BROADSHEET; ;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;",
          "FOLDER",
          "FOLDER;;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;",
          "BOOKLET",
          "BOOKLET; ; ;"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;RIBBON TRIM;",
          "BOOKLET;RIBBON TRIM",
          "BOOKLET;;RIBBON TRIM"
        ],
        "to": "BOOKLET;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD;",
          "CARD",
          "CARD;;"
        ],
        "to": "CARD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAMPHLET",
          "PAMPHLET; ; ;"
        ],
        "to": "PAMPHLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; BORDER",
          "BROADSIDE; . BORDER; ;"
        ],
        "to": "BROADSIDE;BORDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOL;",
          "FOL"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; ; ; X;",
          "BROADSHEET; X;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;",
          "BROADSIDE"
        ],
        "to": "BROADSIDE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER, IN",
          "FOLDER; IN ;;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE; ;HANDWRITTEN;;",
          "HANDWRITTEN BROADSIDE"
        ],
        "to": "BROADSIDE;HANDWRITTEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOK",
          "BOOK; ; ; ;"
        ],
        "to": "BOOK"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARE; ;",
          "CARE; ; ; ;"
        ],
        "to": "CARE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;RIBBON TRIM",
          "BOOKLET; ; ;  RIBBON TRIM;;"
        ],
        "to": "BOOKLET;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;GOLD TRIM",
          "BROADSIDE; ; GOLD TRIM; ;"
        ],
        "to": "BROADSIDE;GOLD TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;PHOTO",
          "BROADSIDE; ; ; PHOTO; ;"
        ],
        "to": "BROADSIDE;PHOTO"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;;RIBBON TRIM",
          "FOLDER; RIBBON TRIM;;"
        ],
        "to": "FOLDER;;RIBBON TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;RED RIBBON TRIM",
          "BOOKLET; RED RIBBON TRIM; ; ;"
        ],
        "to": "BOOKLET;RED RIBBON TRIM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE",
          "BROADSIDE; I",
          "BROAADSIDE; ;"
        ],
        "to": "BROADSIDE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\b[A-Z]{1,2}\\b/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\b[A-Z]{1,2}\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/(;\\s?)+/, \";\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/(;\\s?)+/, \";\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_lamindated at index 7 based on column physical_description using expression grel:if(value.contains(\"LAMINATED\"),1, 0)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_lamindated",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(\"LAMINATED\"),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"LAMINATED\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"LAMINATED\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE",
          "BROADSIDE;",
          "\"  \" BROADSIDE",
          "BROADSIDE; ;"
        ],
        "to": "BROADSIDE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER",
          "FOLDER;",
          ";FOLDER;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRI-FOLD; FOLDED",
          "TRI-FOLD; FOLDED;"
        ],
        "to": "TRI-FOLD; FOLDED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;HOTEL EMBLEM",
          "BROADSIDE;HOTEL EMBLEM  ;"
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;CLUB EMBLEM",
          "BROADSIDE;CLUB' EMBLEM;"
        ],
        "to": "BROADSIDE;CLUB EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDED; OPEN",
          "FOLDED;, OPEN"
        ],
        "to": "FOLDED;OPEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD",
          "CARD;"
        ],
        "to": "CARD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET",
          "BOOKLET;"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER, PAPER INSIDE PLASTIC COVER, ",
          "FOLDER, ;PAPER INSIDE  PLASTIC COVER"
        ],
        "to": "FOLDER;PAPER INSIDE PLASTIC COVER, "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;TIED WITH  MAROON CORD",
          "BOOKLET;TIED WITH MAROON CORD"
        ],
        "to": "BOOKLET;TIED WITH  MAROON CORD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET",
          "BROADSHEET;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER, PAPER, ",
          "FOLDER, PAPER,"
        ],
        "to": "FOLDER;PAPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET; JAPANESE CHILDREN  ;",
          "BROADSHEET; JAPANESE CHILDREN;  ;"
        ],
        "to": "BROADSHEET;JAPANESE CHILDREN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE  SILK,;",
          "SILK BROADSIDE"
        ],
        "to": "SILK BROADSIDE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET;JAPANESE CHILDREN",
          "BROADSHEET;JAPANESE CHILDREN  "
        ],
        "to": "BROADSHEET;JAPANESE CHILDREN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRI-FOLD; FOLDED",
          "TRI-FOLD;FOLDED"
        ],
        "to": "TRI-FOLD;FOLDED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;COVER",
          "FOLDER; COVER;"
        ],
        "to": "FOLDER;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET; COVER",
          "BOOKLET;COVER  "
        ],
        "to": "BOOKLET;COVER  "
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;PLASTIC SLEEVES WITH PAPER INSERT;",
          "FOLDER;PLASTIC SLEEVES WITH PAPER INSERTS;"
        ],
        "to": "FOLDER;PLASTIC SLEEVES WITH PAPER INSERT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PLASTIC SLEEVE WITH PAPER INSERT;",
          "PLASTIC SLEEVE WITH PAPER INSERTS;"
        ],
        "to": "PLASTIC SLEEVE WITH PAPER INSERT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET",
          "BOOKLE;"
        ],
        "to": "BOOKLET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;PHOTOGRAPHS;",
          "FOLDER;PHOTOGRAPH;"
        ],
        "to": "FOLDER;PHOTOGRAPH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PHOTOCOPY ( PAGES);",
          "PHOTOCOPY ( PAGE);"
        ],
        "to": "PHOTOCOPY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;PLASTIC SLEEVES WITH PAPER INSERT;",
          "FOLDER;PLASTIC SLEEVE WITH PAPER INSERT;"
        ],
        "to": "FOLDER;PLASTIC SLEEVES WITH PAPER INSERT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD FOLDER;",
          "CAD FOLDER;"
        ],
        "to": "CARD FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDERP;",
          "FOLDERS;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE",
          "BROADSIDES"
        ],
        "to": "BROADSIDE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;ENGRAVED EMBLRM;",
          "BROADSIDE;ENGRAVED EMBLEM;"
        ],
        "to": "BROADSIDE;ENGRAVED EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD FOLDER;",
          "CARD FOLDR;"
        ],
        "to": "CARD FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;HATEL EMBLEM;",
          "BROADSIDE;HPTEL EMBLEM;"
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;PHOTOGRAPH;",
          "BOOKLET;PHOTOGRAPHS;"
        ],
        "to": "BOOKLET;PHOTOGRAPH"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;HOTEL EMBLEM",
          "BROADEIDE;HOTEL EMBLEM;"
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;HOTEL EMBLEM",
          "BROADSIDE;HOTEL ENBLEM;"
        ],
        "to": "BROADSIDE;HOTEL EMBLEM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE",
          "FROADSIDE;"
        ],
        "to": "BROADSIDE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET",
          "DROADSHEET;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDED;OPEN",
          "FOLDED;OPENED"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_folded at index 7 based on column physical_description using expression grel:if(value.contains(/FOLDED|FOLD/),1, 0)",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_folded",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(/FOLDED|FOLD/),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"FOLDED\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"FOLDED\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";XXCM OPEN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;OPEN"
        ],
        "to": "FOLDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CMF ;OPEN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;OPENS HORIZONTALLY;"
        ],
        "to": "BOOKLET"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;FRONT COVER OPENS TRI-FOLD"
        ],
        "to": "BOOKLET"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";OPEN (WINE LIST) (MENU)"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";OPEN (RIPPED HALF)"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";OPEN; NOT FORCE OPEN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";OPEN;INSERTS MEASURE"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";OPEN;ENG ALTERNATE LANGUAGE"
        ],
        "to": "ENG ALTERNATE LANGUAGE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "OPEN",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";AND OPEN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ACCORDIAN FOLD;",
          "ACCORDIAN FOLD; "
        ],
        "to": "ACCORDIAN FOLD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NEWSPAPER;",
          "NEWSPAPER; "
        ],
        "to": "NEWSPAPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PAPER;",
          " PAPER; "
        ],
        "to": "PAPER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRI-FOLD;",
          "TRI-FOLD; ; UN"
        ],
        "to": "TRI-FOLD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BOOKLET;COVER",
          "BOOKLET; COVERS"
        ],
        "to": "BOOKLET;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;PHOTO",
          "BROADSIDE;PHOTOGRAPH"
        ],
        "to": "BROADSIDE;PHOTOGRAPH"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_emblem at index 7 based on column physical_description using expression grel:if(value.contains(/FLAG EMBLEM|REPLICA FRATERNITY EMBLEM|ROYAL EMBLEM|HOTEL EMBLEM|EMBLEM/),1, 0)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_emblem",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:if(value.contains(/FLAG EMBLEM|REPLICA FRATERNITY EMBLEM|ROYAL EMBLEM|HOTEL EMBLEM|EMBLEM/),1, 0)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/FLAG EMBLEM|REPLICA FRATERNITY EMBLEM|ROYAL EMBLEM|HOTEL EMBLEM|EMBLEM/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/FLAG EMBLEM|REPLICA FRATERNITY EMBLEM|ROYAL EMBLEM|HOTEL EMBLEM|EMBLEM/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSHEET",
          "BROADSHEET;",
          "BROADSHEET;;"
        ],
        "to": "BROADSHEET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER",
          "FOLDER;"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;GOLD TRIM",
          "BROADSIDE;;GOLD TRIM;"
        ],
        "to": "BROADSIDE;GOLD TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARD",
          "CARD;;"
        ],
        "to": "CARD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE",
          "BROADSIDE;"
        ],
        "to": "BROADSIDE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER;COVER",
          "FOLDER; COVER;"
        ],
        "to": "FOLDER;COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADSIDE;FLAG ;",
          "BROADSHEET;FLAG ;"
        ],
        "to": "BROADSIDE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRI-FOLD AND FOLDER;"
        ],
        "to": "TRI-FOLD;FOLDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TRI-FOLD;AND TRI-FOLD;"
        ],
        "to": "TRI-FOLD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TIERED/LAYERED PAPER; ITS BIGGEST"
        ],
        "to": "PAPER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THREE CARDS;[MENU];[TOASTS];"
        ],
        "to": "CARD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER (UN);"
        ],
        "to": "FOLDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER, BUFF, [HOTEL?]"
        ],
        "to": "FOLDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": ",",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOLDER,;HANDWRITTEN;"
        ],
        "to": "FOLDER;HANDWRITTEN"
      }
    ]
  },
  {
    "op": "core/column-addition",
    "description": "Create column physical_description_type at index 7 based on column physical_description using expression grel:join(\n uniques(\n  sort(\n   value.find(/(FOLDER|PAPER|BROADSIDE|BROADSHEET|BOOKLET|TRI-FOLD|PAMPHLET|SHEET|NEWSPAPER|MAP|PLACEMAT|CARD|BOOK)/)\n  )\n ), \";\"\n)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "physical_description_type",
    "columnInsertIndex": 7,
    "baseColumnName": "physical_description",
    "expression": "grel:join(\n uniques(\n  sort(\n   value.find(/(FOLDER|PAPER|BROADSIDE|BROADSHEET|BOOKLET|TRI-FOLD|PAMPHLET|SHEET|NEWSPAPER|MAP|PLACEMAT|CARD|BOOK)/)\n  )\n ), \";\"\n)",
    "onError": "set-to-blank"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/(FOLDER|PAPER|BROADSIDE|BROADSHEET|BOOKLET|TRI-FOLD|PAMPHLET|SHEET|NEWSPAPER|MAP|PLACEMAT|CARD|BOOK)/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/(FOLDER|PAPER|BROADSIDE|BROADSHEET|BOOKLET|TRI-FOLD|PAMPHLET|SHEET|NEWSPAPER|MAP|PLACEMAT|CARD|BOOK)/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/(;\\s?)+/, \";\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/(;\\s?)+/, \";\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";ENGRAVED",
          ";ENGRAVED ;",
          ";ENGRAVED;"
        ],
        "to": "ENGRAVED"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";AND ;",
          "AND",
          "AND ;AND ;"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          ";"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";GOLD TRIM",
          ";GOLD TRIM;"
        ],
        "to": "GOLD TRIM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";GOLD",
          ";GOLD ;"
        ],
        "to": "GOLD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIECES;, ;,",
          "PIECES;, ;, ;,"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";HANDWRITTEN",
          ";HANDWRITTEN;"
        ],
        "to": "HANDWRITTEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";RIBBON TRIM",
          ";RIBBON TRIM;"
        ],
        "to": "RIBBON TRIM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          "S;"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";JAPANESE SCENE;",
          ";JAPANESE SCENES;"
        ],
        "to": "JAPANESE SCENE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";WATER STAIN (BOTTOM, CENTER)",
          ";WATER STAIN (BOTTOM, CENTER);FOLDS (UPPER, RIGHT/LEFT);TEARS (CENTER)",
          ";WATER STAIN (BOTTOM, LEFT AND RIGHT CORNERS)",
          ";WATER STAIN (BOTTOM, RIGHT)"
        ],
        "to": "WATER STAIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";PLASTIC SLEEVES WITH INSERT",
          "PLASTIC SLEEVE WITH INSERT",
          ";PLASTIC SLEEVES WITH INSERTS;"
        ],
        "to": "PLASTIC SLEEVES WITH INSERT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";WATER STAINS (CENTER)",
          ";WATER STAINS (CENTER, BOTTOM)",
          ";WATER STAINS (CENTER, FOLD);UNEVEN FOLD"
        ],
        "to": "WATER STAINS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";WATER STAIN (CENTER, SEAM)",
          ";WATER STAIN (CENTER, BOTTOM, MIDDLE)"
        ],
        "to": "WATER STAIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";CIL;",
          ";CIOL;"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARE",
          ";GREY ;"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";CREASED LENGHT-WISE",
          ";CREASED LENGTH-WISE"
        ],
        "to": "CREASED LENGHT-WISE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WATER STAIN",
          "WATER STAINS"
        ],
        "to": "WATER STAIN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";COVERS;BROWN CORD",
          ";BROWN CORD;COVER"
        ],
        "to": "COVER;BROWN CORD"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PLASTIC SLEEVES WITH INSERT",
          ";CLEAR PLASTIC SLEEVES WITH INSERTED"
        ],
        "to": "PLASTIC SLEEVES WITH INSERT"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description_type using expression grel:if(isBlank(value), \"FOLDER\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "FOLD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description_type",
    "expression": "grel:if(isBlank(value), \"FOLDER\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/FOLDOUT|FOLD/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "name": "physical_description",
          "columnName": "physical_description",
          "query": "FOLD",
          "mode": "text",
          "caseSensitive": false,
          "invert": false,
          "type": "text"
        }
      ],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/FOLDOUT|FOLD/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S;COVER;"
        ],
        "to": "COVER"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/ONE|TWO|THREE|PAGE/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/ONE|TWO|THREE|PAGE/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(\"( S)\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(\"( S)\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";COVER",
          ";COVER;",
          "COVER"
        ],
        "to": "COVER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          ";"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";.COVER;RIBBON TRIM;",
          ";COVER;RIBBON TRIM;"
        ],
        "to": "COVER;RIBBON TRIM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          ";S;"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";EVERY ;",
          "FRE"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";METAL FASTNERS (BOTTOM, RECTO, VERSO)",
          ";METAL FASTNERS ALONG EDGES"
        ],
        "to": "METAL FASTNERS"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";BORDER"
        ],
        "to": "BORDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";GOLD CORD"
        ],
        "to": "GOLD CORD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";PHOTOGRAPH"
        ],
        "to": "PHOTOGRAPH"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";JAPANESE CHILDREN"
        ],
        "to": "JAPANESE CHILDREN"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";CLUB"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";CREASED (WIDTH-WISE)"
        ],
        "to": "CREASED (WIDTH-WISE)"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";FLAG"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";SILVER CORD"
        ],
        "to": "SILVER CORD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";BACK;"
        ],
        "to": "BACK"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";CREASE (LENGTH-WISE)"
        ],
        "to": "CREASE (LENGTH-WISE)"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";INSIDE PLASTIC COVER,"
        ],
        "to": "INSIDE PLASTIC COVER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";RED RIBBON TRIM"
        ],
        "to": "RED RIBBON TRIM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";TIED WITH MAROON CORD"
        ],
        "to": "TIED WITH MAROON CORD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";COLL;"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";COVER ;GOLD CORD"
        ],
        "to": "COVER;GOLD CORD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";GLOSSY"
        ],
        "to": "GLOSSY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";HOTEL SEAL;"
        ],
        "to": "HOTEL SEAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";JAPANESE COUNTRY"
        ],
        "to": "JAPANESE COUNTRY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";PHOTO;"
        ],
        "to": "PHOTO"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";ROUNDED TOP"
        ],
        "to": "ROUNDED TOP"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";SILVER ;"
        ],
        "to": "SILVER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";UNEVEN SEAM"
        ],
        "to": "UNEVEN SEAM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROADIDE;"
        ],
        "to": "BROASIDE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BROASIDE"
        ],
        "to": "BROADSIDE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/[.,;\\(\\)\\-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/[.,;\\(\\)\\-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COVER GOLD CORD",
          "GOLD CORD COVER"
        ],
        "to": "COVER GOLD CORD"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BORDER",
          "USBORDER"
        ],
        "to": "BORDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CREASE LENGTH WISE",
          "CREASED LENGHT WISE"
        ],
        "to": "CREASE LENGTH WISE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "JOINED RIBBON",
          "S JOINED RIBBONS"
        ],
        "to": "JOINED RIBBON"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PIECE",
          "PIECES S"
        ],
        "to": "PIECE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOFLDER",
          "OLDER",
          "BOLDER"
        ],
        "to": "FOLDER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OLDER",
          "BOLDER"
        ],
        "to": "FOLDER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column physical_description",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PHOTOGRAPH",
          "PHOTOCOPY",
          "PHOTO",
          "PHOTO BANK",
          "PHOTO GUEST"
        ],
        "to": "PHOTOGRAPH"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column physical_description using expression grel:value.replace(/\\b(AND|S)\\b/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physical_description",
    "expression": "grel:value.replace(/\\b(AND|S)\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]
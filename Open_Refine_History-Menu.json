[
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column id using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Restaurant name and/or location not given]",
          "Restaurant name and/or location not given]",
          "[Restaurant name and/or location not given] ",
          "Restaurant name and/or location not given",
          "[Restaurant name and/or location not given"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Merchant's Club",
          "The Merchants Club",
          "The Merchants' Club"
        ],
        "to": "The Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Imperial",
          "Imperial Hotel",
          "Impérial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's",
          "Delmonicos."
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Healy's Forty-second Street restaurant",
          "Healy's Forty-second Street Restaurant"
        ],
        "to": "Healys Forty-second Street restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Guffanti's Table d'Hôte",
          "Guffanti's Table d'Hôte "
        ],
        "to": "Guffantis Table d'Hôte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "[Not Given]",
          "[Not given]"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S.S. \"Frederik VIII\"",
          "S.S. Frederik VIII"
        ],
        "to": "S.S. Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Hotel Fairmont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "South Ferry Hotel",
          " South Ferry Hotel"
        ],
        "to": "Hotel South Ferry"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley-Plaza Hotel",
          "Hotel Copley-Plaza"
        ],
        "to": "Hotel Copley-Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St. Denis Hotel",
          "Hotel St. Denis"
        ],
        "to": "Hotel St. Denis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cosmopolitan Hotel",
          "Cosmopolitan... Hotel"
        ],
        "to": "Hotel Cosmopolitan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Hotel Palace"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel DuPont",
          "Hotel duPont"
        ],
        "to": "Hotel DuPont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Rigg's Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marlborough",
          "Hotel Marlborough "
        ],
        "to": "Hotel Marlborough"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel  Baltimore",
          "Hotel Baltimore"
        ],
        "to": "Hotel  Baltimore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Mercantile Lunch Co.",
          "Mercantile lunch Co."
        ],
        "to": "Mercantile Lunch Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U.S.S. New York",
          "U.S.S. New York (?)"
        ],
        "to": "U.S.S. New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lafayette Hotel",
          "Hotel Lafayette"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The New Willard Hotel",
          "The New Willard Hotel."
        ],
        "to": "Hotel The New Willard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants Club"
        ],
        "to": "Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Boulevard",
          "Cafe Boulevard"
        ],
        "to": "Cafe Boulevard"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Met-Life Building",
          "MetLife Building"
        ],
        "to": "MetLife Building"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"é\", \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"é\", \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(/[.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(/[.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(\"H?tel\", \"Hotel\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(\"H?tel\", \"Hotel\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Des Beaux Arts",
          "Cafe Des Beaux arts"
        ],
        "to": "Cafe Des Beaux Arts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Copley plaza",
          "Copley Plaza Hotel"
        ],
        "to": "Hotel Copley plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton",
          "Ritz carlton"
        ],
        "to": "Ritz Carlton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Stratford",
          "Bellevue stratford"
        ],
        "to": "Bellevue Stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton Hotel",
          "Ritz carlton Hotel"
        ],
        "to": "Ritz Carlton Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza",
          "Copley plaza"
        ],
        "to": "Hotel Copley plaza"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hof Brau Haus"
        ],
        "to": "Hof Brau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel La Salle",
          "Hotel Lasalle"
        ],
        "to": "Hotel La Salle"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aldine Club Rooma",
          "Aldine Club Rooms"
        ],
        "to": "Aldine Club Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "The Bellevue stratford",
          "The Bellvue stratford"
        ],
        "to": "The Bellevue stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Young Mans Christian Association",
          "Young Mens Christian Association"
        ],
        "to": "Young Mens Christian Association"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorf astoria: South Gate",
          "Waldorf astoria: Grand Ball Room"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Hotel Ponchartrain"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Horn & Hardart Company",
          "Horn & Hardart Company Dining Rooms"
        ],
        "to": "Horn & Hardart Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gutmanns Cafe And Restaurant",
          "Gutmanns Cafe And Restaurant Luncheon"
        ],
        "to": "Gutmanns Cafe And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wiehl & Widmann",
          "Wiehl & Widman"
        ],
        "to": "Wiehl & Widmann"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Joes Restaurant",
          "Jeos Restaurant"
        ],
        "to": "Joes Restaurant"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression grel:value.replace(/\\bThe\\b/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "grel:value.replace(/\\bThe\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column name using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ten Eyck",
          "Ten Eyck Hotel"
        ],
        "to": "Hotel Ten Eyck"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Willard",
          "New Willard Hotel"
        ],
        "to": "Hotel New Willard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Washington",
          "Washington Hotel"
        ],
        "to": "Hotel Washington"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Huether & Steffens",
          "Heuther & Steffens"
        ],
        "to": "Huether & Steffens"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Breevort",
          "Hotel Brevoort"
        ],
        "to": "Hotel Brevoort"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Greenhut Siegel Cooper Co",
          "Greehut Siegel Cooper Co"
        ],
        "to": "Greenhut Siegel Cooper Co"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column name",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hanover Lunch Co",
          "Hanover Lunch"
        ],
        "to": "Hanover Lunch Co"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/\\bThe\\b/, \"\")\nvalue.replace(\"H?tel\", \"Hotel\")\nvalue.replace(\"'\", \"\")\nvalue.replace(\"\\\"\", \"\")\nvalue.replace(\"é\", \"e\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/\\bThe\\b/, \"\")\nvalue.replace(\"H?tel\", \"Hotel\")\nvalue.replace(\"'\", \"\")\nvalue.replace(\"\\\"\", \"\")\nvalue.replace(\"é\", \"e\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[\\[\\]\\(\\)\\-{}\\?]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[\\[\\]\\(\\)\\-{}\\?]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  Antwerpen  Ny",
          "Red Star Line  Antwerpen Ny",
          "Red Star Line  Antwerpen ny",
          "Red Star Line antwerpen Ny",
          "Red Star Line Antwerpen Ny",
          "Red Star Line Antwerpen ny",
          "Red Star Line antwerpen  Ny",
          "Red Star Line antwerpen ny"
        ],
        "to": "Red Star Line Antwerpen NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyd  Bremen",
          "Norddeutscher Lloyd Bremen;",
          "Norddeutscher Lloyd, Bremen",
          "Bremen Norddeutscher Lloyd",
          "Norddeutscher Lloyd bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Engineer's Club",
          "Engineers Club",
          "Engineers' Club",
          "engineers Club"
        ],
        "to": "Engineers Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Avenue Hotel",
          "fifth Avenue Hotel",
          "Fifth Avenue Hotel ",
          "Fifth Avenue Hotel;"
        ],
        "to": "Fifth Avenue Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs",
          "Childs'",
          "Child's"
        ],
        "to": "Childs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeutscher Lloyd Bremen",
          "Nordeutscher Lloyd, Bremen",
          "Nordeutscher Lloyd  Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alta Vista Hotel",
          "Alta Vista Hotel ",
          "alta Vista Hotel"
        ],
        "to": "Alta Vista Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gramercy Park Hotel",
          "Hotel Gramercy Park",
          "Gramercy Park Hotel; Hotel Gramercy Park"
        ],
        "to": "Gramercy Park Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\liberté\\\"\"",
          "Paquebot Liberte",
          "Paquebot \\liberte\\\"\""
        ],
        "to": "Paquebot Liberte"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Riggs'",
          "Rigg's",
          "Riggs"
        ],
        "to": "Riggs"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\".\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\".\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F Lang's Ladies And Gents Lunch Room And Restaurant",
          "Edward F Lang's Ladies' And Gent's Lunch Room And Restaurant",
          "Edward F Lang's Ladies' And Gent's Lunch Room And Restaurant;"
        ],
        "to": "Edward F Langs Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Knickerbocker",
          "Hotel Knickerbocker ",
          "Knickerbocker Hotel"
        ],
        "to": "Hotel Knickerbocker"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Majestic",
          "majestic Hotel",
          "Majestic Hotel"
        ],
        "to": "Hotel Majestic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colonial Hotel",
          "Hotel Colonial",
          "colonial Hotel"
        ],
        "to": "Hotel Colonial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line",
          "Red Star Line ",
          "red Star Line"
        ],
        "to": "Red Star Line "
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club",
          "Merchants' Club",
          "Merchants Club"
        ],
        "to": "Merchants Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Denis Hotel",
          "Hotel St Denis",
          "St, Denis Hotel"
        ],
        "to": "Hotel St Denis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial Hotel",
          "Hotel Imperial",
          "Impérial Hotel"
        ],
        "to": "Hotel Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grand Hotel Royal",
          "Grand Hôtel Royal",
          "Royal Grand Hotel"
        ],
        "to": "Grand Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Medical Editors' Association",
          "American Medical Editor's Association",
          "American Medical Editors Association"
        ],
        "to": "American Medical Editors Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKobe Maru",
          "Nippon Yusen Kaisha sSKobe Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Metropole",
          "Metropole Hotel"
        ],
        "to": "Hotel Metropole"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS American Shipper",
          "SS \"american Shipper\"\"\""
        ],
        "to": "S S American Shipper"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKasuga",
          "Nippon Yusen Kaisha sSKasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company  Sonoma",
          "Oceanic Steamship Company _ Sonoma"
        ],
        "to": "Oceanic Steamship Company  Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wabash Railway Company",
          "Wabash railway Company"
        ],
        "to": "Wabash Railway Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Europäischer Hof",
          "Hotel Europaischer Hof"
        ],
        "to": "Hotel Europaischer Hof"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "De L'ange Hotel",
          "Hotel De L'ange"
        ],
        "to": "Hotel De Lange"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Regis  Sheraton",
          "St Regis Sheraton"
        ],
        "to": "St Regis Sheraton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rigg's Twentieth Street Restaurant",
          "Riggs' Twentieth Street Restaurant"
        ],
        "to": "Riggs Twentieth Street Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Frederik Viii",
          "king Frederik Viii"
        ],
        "to": "King Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  Sierra",
          "Oceanic Steamship Co Sierra"
        ],
        "to": "Oceanic Steamship Co  Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Francis Hotel",
          "Hotel St Francis"
        ],
        "to": "Hotel St Francis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Alexander Of Servia",
          "king Alexander Of Servia"
        ],
        "to": "King Alexander Of Servia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Association Of New York City",
          "hotel Association Of New York City"
        ],
        "to": "Hotel Association Of New York City"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compagnie Generale Transatlantique",
          "Compagnie Générale Transatlantique"
        ],
        "to": "Compagnie Generale Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Muhlenkamper Fahrhaus",
          "Mühlenkamper Fährhaus"
        ],
        "to": "Muhlenkamper Fahrhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Sons Of Revolution In State Of Missouri",
          "Society Sons Of Revolution In State Of Missouri"
        ],
        "to": "Society Of Sons Of Revolution In State Of Missouri"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Childs' Lunch Rooms",
          "Child's Lunch Rooms"
        ],
        "to": "Childs Lunch Rooms"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  SSZealandia",
          "Oceanic Steamship Co SSZealandia"
        ],
        "to": "Oceanic Steamship Co  S S Zealandia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Manhattan",
          "Manhattan Hotel"
        ],
        "to": "Hotel Manhattan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victory",
          "Victory Hotel"
        ],
        "to": "Hotel Victory"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          " Club",
          "club"
        ],
        "to": " Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Grunewald",
          "Grunewald Hotel"
        ],
        "to": "Hotel Grunewald"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Algazar",
          "Algazar Hotel"
        ],
        "to": "Hotel Algazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fairmont Hotel",
          "Hotel Fairmont"
        ],
        "to": "Hotel Fairmont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Alcazar Hotel",
          "Hotel Alcazar"
        ],
        "to": "Hotel Alcazar"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Savarin",
          "Café Savarin"
        ],
        "to": "Cafe Savarin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Nicholas Hotel",
          "Hotel St Nicholas"
        ],
        "to": "Hotel St Nicholas"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburg Amerika Linie",
          "Hamburg  Amerika Linie"
        ],
        "to": "Hamburg Amerika Linie"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Colorado",
          "Colorado Hotel"
        ],
        "to": "Hotel Colorado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Colombo Hotel",
          "Hotel Colombo"
        ],
        "to": "Hotel Colombo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "maharaja Of Baroda",
          "Maharaja Of Baroda"
        ],
        "to": "Maharaja Of Baroda"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel",
          "Palace Hôtel"
        ],
        "to": "Palace Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ancient Accepted Scottish Rite",
          "Ancient & Accepted Scottish Rite"
        ],
        "to": "Ancient Accepted Scottish Rite"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "La Crépe",
          "La Crêpe"
        ],
        "to": "La Crepe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company sSZealander",
          "Oceanic Steamship Company  SSZealander"
        ],
        "to": "Oceanic Steamship Company S S Zealander"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pirate's House",
          "Pirates' House"
        ],
        "to": "Pirates House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Michigan Society Of Sons Of American Revolution",
          "Michigan Society Sons Of American Revolution"
        ],
        "to": "Michigan Society Of Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elk's Club",
          "Elks Club"
        ],
        "to": "Elks Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Boston",
          "Merchants' Club Of Boston"
        ],
        "to": "Merchants Club Of Boston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Washington",
          "Washington Hotel"
        ],
        "to": "Hotel Washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Second Panel Sheriff's Jury",
          "Sheriff's Jury Second Panel"
        ],
        "to": "Second Panel Sheriffs Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Elks Club House",
          "Elks' Club House"
        ],
        "to": "Elks Club House"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Du Musee",
          "Hotel Du Musee'"
        ],
        "to": "Hotel Du Musee"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SSWesternland",
          "Red Star Line SSWesternland"
        ],
        "to": "Red Star Line  S S Westernland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Minot",
          "Minot Hotel"
        ],
        "to": "Hotel Minot"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Thorndike",
          "Thorndike Hotel"
        ],
        "to": "Hotel Thorndike"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sherry's",
          "Sherrys"
        ],
        "to": "Sherrys"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorfastoria",
          "waldorfastoria"
        ],
        "to": "Waldorfastoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ten Eyck",
          "Ten Eyck Hotel"
        ],
        "to": "Hotel Ten Eyck"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ambassador Hotel",
          "Hotel Ambassador"
        ],
        "to": "Hotel Ambassador"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bristol Hotel",
          "Hotel Bristol"
        ],
        "to": "Hotel Bristol"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalder's Natur Weinhaus",
          "Schwarzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalders Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Private",
          "private"
        ],
        "to": "Private"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Algonquin Hotel",
          "Hotel Algonquin"
        ],
        "to": "Hotel Algonquin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Worthy",
          "Worthy Hotel"
        ],
        "to": "Hotel Worthy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Willard's Hotel",
          "Willards Hotel"
        ],
        "to": "Willards Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co  SSAthabasca",
          "Canadian Pacific Railway Co SSAthabasca"
        ],
        "to": "Canadian Pacific Railway Co S S Athabasca"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Century Club",
          "century Club"
        ],
        "to": "Century Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Astor",
          "Astor Hotel"
        ],
        "to": "Hotel Astor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Emperor Nicholas Ii",
          "emperor Nicholas Ii"
        ],
        "to": "Emperor Nicholas II"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Chamberlin",
          "Chamberlin Hotel"
        ],
        "to": "Hotel Chamberlin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grocers Hall",
          "Grocers' Hall"
        ],
        "to": "Grocers Hall"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Continental Hotel",
          "Hotel Continental"
        ],
        "to": "Hotel Continental"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System",
          "new York Central System"
        ],
        "to": "New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Northern Steamship Company/great Northern Ry Line",
          "northern Steamship Company/great Northern Ry Line"
        ],
        "to": "Northern Steamship Company great Northern Ry Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "king Edward Vii"
        ],
        "to": "King Edward VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Regis Hotel",
          "Hotel St Regis"
        ],
        "to": "Hotel St Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Netherland Hotel"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "StRegis Hotel",
          "Hotel StRegis"
        ],
        "to": "Hotel St Regis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS",
          "Usms"
        ],
        "to": "USMS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Empire",
          "Empire Hotel"
        ],
        "to": "Hotel Empire"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USMS New York",
          "Usms New York"
        ],
        "to": "USMS New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Paquebot \\france\\\"\"",
          "Paquebot France"
        ],
        "to": "Paquebot France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Palm Hotel",
          "Hotel Royal Palm"
        ],
        "to": "Hotel Royal Palm"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "English Hotel Restaurant",
          "english Hotel Restaurant"
        ],
        "to": "English Hotel Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "George Washington Hotel",
          "Hotel George Washington"
        ],
        "to": "Hotel George Washington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RG",
          "Rg"
        ],
        "to": "RG"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Manhattan Club",
          "manhattan Club"
        ],
        "to": "Manhattan Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia Hotel",
          "Hotel Columbia"
        ],
        "to": "Hotel Columbia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS Oceanic",
          "Rms Oceanic"
        ],
        "to": "RMS Oceanic"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe De Paris",
          "Café De Paris"
        ],
        "to": "Cafe De Paris"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Xiii Club",
          "Club Xiii"
        ],
        "to": "Club XIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Empire State Society Of Sons Of American Revolution",
          "Empire State Society Sons Of American Revolution"
        ],
        "to": "Empire State Society Of Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Delmonicos",
          "Delmonico's"
        ],
        "to": "Delmonicos"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lafayette",
          "Lafayette Hotel"
        ],
        "to": "Hotel Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Lüchow's Restaurant",
          "Luchow's Restaurant"
        ],
        "to": "Luchows Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pennsylvania",
          "Pennsylvania Hotel"
        ],
        "to": "Hotel Pennsylvania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Savoy",
          "Savoy Hotel"
        ],
        "to": "Hotel Savoy"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dennis",
          "Dennis Hotel"
        ],
        "to": "Hotel Dennis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS Parthia",
          "RMS \"parthia\"\"\""
        ],
        "to": "RMS Parthia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Lafayette",
          "Cafe Lafayette"
        ],
        "to": "Cafe Lafayette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Imperial",
          "Imperial "
        ],
        "to": "Imperial"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS Minnetonka",
          "SS \"minnetonka\"\"\""
        ],
        "to": "S S Minnetonka"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Commodore Hotel",
          "Hotel Commodore"
        ],
        "to": "Hotel Commodore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usms St Louis",
          "USMS St Louis"
        ],
        "to": "USMS St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Winthrop",
          "Winthrop Hotel"
        ],
        "to": "Hotel Winthrop"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Meyer's Hotel",
          "Meyers Hotel"
        ],
        "to": "Meyers Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Dome Of Four Seasons",
          "Le Dôme Of Four Seasons"
        ],
        "to": "Le Dome Of Four Seasons"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Phonix",
          "Phonix Hotel"
        ],
        "to": "Hotel Phonix"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard Club",
          "harvard Club"
        ],
        "to": "Harvard Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Biltmore",
          "Biltmore Hotel"
        ],
        "to": "Hotel Biltmore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Jefferson",
          "Jefferson Hotel"
        ],
        "to": "Hotel Jefferson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mcnell's",
          "Smith & Mcnells"
        ],
        "to": "Smith & Mcnells"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel D'angleterre",
          "D'angleterre Hotel"
        ],
        "to": "Hotel Dangleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union Club",
          "union Club"
        ],
        "to": "Union Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS \"queen Mary\"\"\"",
          "RMS \\queen Mary\\\"\""
        ],
        "to": "RMS Queen Mary"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Legation",
          "american Legation"
        ],
        "to": "American Legation"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Claremont",
          "Claremont Hotel"
        ],
        "to": "Hotel Claremont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Del Coronado",
          "Del Coronado Hotel"
        ],
        "to": "Hotel Del Coronado"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafe Boulevard",
          "Café Boulevard"
        ],
        "to": "Cafe Boulevard"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Champlain",
          "Champlain Hotel"
        ],
        "to": "Hotel Champlain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RMS \\mauretania\\\"\"",
          "RMS Mauretania"
        ],
        "to": "RMS Mauretania"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Society Of Colonial Wars In State Of New York",
          "Society Of Society Of Colonial Wars In State Of New York"
        ],
        "to": "Society Of Colonial Wars In State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS \"frederik Viii\"",
          "SS Frederik Viii"
        ],
        "to": "S S Frederik VIII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzie's Hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "American Bankers Association",
          "American Bankers' Association"
        ],
        "to": "American Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "king Umberto",
          "King Umberto"
        ],
        "to": "King Umberto"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Haakon Vii",
          "king Haakon Vii"
        ],
        "to": "King Haakon VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Brevoort Restaurant",
          "Restaurant Brevoort"
        ],
        "to": "Brevoort Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Promenade Café",
          "Cafe Promenade"
        ],
        "to": "Promenade Cafe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company  Sierra",
          "Oceanic Steamship Company sierra"
        ],
        "to": "Oceanic Steamship Company  Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS \"ile De France\"\"\"",
          "SS Ile De France"
        ],
        "to": "S S Ile De France"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Master Printers Association",
          "Master Printers' Association"
        ],
        "to": "Master Printers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wärdshuset Stallmästaregarden",
          "Wärdshuset Stallmästaregården"
        ],
        "to": "Wardshuset Stallmastaregarden"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Restaurant Mayan",
          "Mayan Restaurant"
        ],
        "to": "Restaurant Mayan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ballroom, Plaza",
          "Plaza Ballroom"
        ],
        "to": "Plaza Ballroom"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Adams' Restaurant",
          "Adam's Restaurant"
        ],
        "to": "Adams Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Grenoble Hotel",
          "Hotel Grenoble"
        ],
        "to": "Hotel Grenoble"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Santa Fe Route",
          "Santa Fe' Route"
        ],
        "to": "Santa Fe Route"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Harvard University",
          "harvard University"
        ],
        "to": "Harvard University"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "restaurant Name And/or Location Not Given",
          "Restaurant Name And/or Location Not Given"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Windsor Hotel",
          "Hotel Windsor"
        ],
        "to": "Hotel Windsor"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Toyo Kisen Kaisha  Hong Kong Maru",
          "Toyo Kisen Kaisha hong Kong Maru"
        ],
        "to": "Toyo Kisen Kaisha  Hong Kong Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel National",
          "National Hotel"
        ],
        "to": "Hotel National"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Merchant's Club Of Chicago",
          "Merchants Club Of Chicago"
        ],
        "to": "Merchants Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Marie Antoinette",
          "Marie Antoinette Hotel"
        ],
        "to": "Hotel Marie Antoinette"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Quisisana",
          "Quisisana Hotel"
        ],
        "to": "Hotel Quisisana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fifth Ave Hotel",
          "fifth Ave Hotel"
        ],
        "to": "Fifth Ave Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Central System, Boston & Albany Railroad",
          "Boston & Albany Railroad , New York Central System"
        ],
        "to": "Boston Albany Railroad New York Central System"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza Hotel",
          "Hotel Copley Plaza"
        ],
        "to": "Hotel Copley Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Society  Sons Of American Revolution",
          "Wisconsin Society Sons Of American Revolution"
        ],
        "to": "Wisconsin Society Sons Of American Revolution"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Old Guard Albany Zouave Cadets",
          "Albany Zouave Cadets  Old Guard"
        ],
        "to": "Old Guard Albany Zouave Cadets"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St George's Society",
          "St Georges Society"
        ],
        "to": "St Georges Society"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "San Remo Hotel",
          "Hotel San Remo"
        ],
        "to": "Hotel San Remo"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Shanley's",
          "Shanleys"
        ],
        "to": "Shanleys"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bankers' Club Of Chicago",
          "Bankers Club Of Chicago"
        ],
        "to": "Bankers Club Of Chicago"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Fraunces' Tavern",
          "Fraunces Tavern"
        ],
        "to": "Fraunces Tavern"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSNasuga",
          "Nippon Yusen Kaisha sSNasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Nasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Christian Ix Of Denmark",
          "king Christian Ix Of Denmark"
        ],
        "to": "King Christian IX Of Denmark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friar's Club",
          "Friars' Club"
        ],
        "to": "Friars Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeteria  Lunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel St George",
          "St George Hotel"
        ],
        "to": "Hotel St George"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Le Café Chambord",
          "Le Cafe Chambord"
        ],
        "to": "Le Cafe Chambord"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Co  Sonoma",
          "Oceanic Steamship Co _ Sonoma"
        ],
        "to": "Oceanic Steamship Co  Sonoma"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Plaza",
          "Plaza Hotel"
        ],
        "to": "Hotel Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "York Hotel",
          "Hotel York"
        ],
        "to": "Hotel York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Royal",
          "Royal Hotel"
        ],
        "to": "Hotel Royal"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Vendome",
          "Vendome Hotel"
        ],
        "to": "Hotel Vendome"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Transatlantique",
          "Cie Cie Transatlantique"
        ],
        "to": "Cie Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Us Army  Subsistence Dept",
          "US Army  Subsistence Dept"
        ],
        "to": "US Army  Subsistence Dept"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Martinique",
          "Martinique Hotel"
        ],
        "to": "Hotel Martinique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel New Weston",
          "New Weston Hotel"
        ],
        "to": "Hotel New Weston"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copleyplaza Hotel",
          "Hotel Copleyplaza"
        ],
        "to": "Hotel Copleyplaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SSKinshin Maru",
          "Nippon Yusen Kaisha sSKinshin Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kinshin Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Victoria",
          "Victoria Hotel"
        ],
        "to": "Hotel Victoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ponce De Leon Hotel",
          "Hotel Ponce De Leon"
        ],
        "to": "Hotel Ponce De Leon"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Evelyn Restaurant",
          "Evelyn Restaurant;"
        ],
        "to": "Evelyn Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "american Line",
          "American Line"
        ],
        "to": "American Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Pontchartrain Hotel"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Lexington",
          "Lexington Hotel"
        ],
        "to": "Hotel Lexington"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Revelstoke",
          "Revelstoke Hotel"
        ],
        "to": "Hotel Revelstoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha  SS Kasuga",
          "Nippon Yusen Kaisha ss Kasuga"
        ],
        "to": "Nippon Yusen Kaisha S S Kasuga"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Patriarch's",
          "Patriarchs"
        ],
        "to": "Patriarchs"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Roanoke",
          "Roanoke Hotel"
        ],
        "to": "Hotel Roanoke"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Union League Club",
          "union League Club"
        ],
        "to": "Union League Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Des Indes Hotel",
          "Hotel Des Indes"
        ],
        "to": "Hotel Des Indes"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Baltimore Hotel",
          "Hotel Baltimore"
        ],
        "to": "Hotel Baltimore"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Westminster Hotel",
          "Hotel Westminster"
        ],
        "to": "Hotel Westminster"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Statler",
          "Statler Hotel"
        ],
        "to": "Hotel Statler"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS New York",
          "USS New York "
        ],
        "to": "USS New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Gallatin Hotel",
          "Hotel Gallatin"
        ],
        "to": "Hotel Gallatin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Chicagoan, Kansas Cityan",
          "Kansas Cityan Chicagoan"
        ],
        "to": "Kansas Cityan Chicagoan"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbräu Haus"
        ],
        "to": "Hofbrau Haus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Shorthand Reporter's Association",
          "New England Shorthand Reporters' Association"
        ],
        "to": "New England Shorthand Reporters Association"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Profile House And Hotel Vendome",
          "Hotel Vendome And Profile House"
        ],
        "to": "Hotel Vendome And Profile House"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SSFriesland",
          "Red Star Line Ss Friesland",
          "Red Star Liness Friesland"
        ],
        "to": "Red Star Line S S Friesland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS Raleigh",
          "USSRaleigh",
          "USSSRaleigh"
        ],
        "to": "USS Raleigh"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hofbrau Haus",
          "Hofbrauhaus",
          "Hof Brau Haus"
        ],
        "to": "Hofbrauhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nippon Yusen Kaisha S S Kobe Maru",
          "Nippon Yusen Kaisha  SS Kobe Maru",
          "Nipppon Yusen Kaisha  SS Kobe Maru"
        ],
        "to": "Nippon Yusen Kaisha S S Kobe Maru"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "",
          "L"
        ],
        "to": ""
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Societa La Piemontese",
          "Societa'la Piemontese"
        ],
        "to": "Societa La Piemontese"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dupont",
          "Hotel Du Pont"
        ],
        "to": "Hotel Du Pont"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AH Meyer Rathskeller",
          "AHMeyer Rathskeller"
        ],
        "to": "AH Meyer Rathskeller"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "S S President Wilson",
          "SS President Wilson"
        ],
        "to": "S S President Wilson"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevuestratford",
          "Bellevue  Stratford"
        ],
        "to": "Bellevue  Stratford"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "United Air Lines",
          "United Airlines"
        ],
        "to": "United Airlines"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St Andrew's Society Of State Of New York",
          "StAndrews Society Of State Of New York"
        ],
        "to": "St Andrews Society Of State Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Flat Iron Resaurant And Cafe",
          "Flatiron Resaurant And Cafe"
        ],
        "to": "Flatiron Resaurant And Cafe"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cafeteria Lunch",
          "Cafeterialunch"
        ],
        "to": "Cafeteria Lunch"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Copley Plaza",
          "Copleyplaza"
        ],
        "to": "Copley Plaza"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cie Gle Transatlantique",
          "CieGle Transatlantique"
        ],
        "to": "Cie Gle Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bellevue Stratford Hotel",
          "Bellevuestratford Hotel"
        ],
        "to": "Bellevue Stratford Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bundeshaus Restaurant",
          "Bundeshausrestaurant"
        ],
        "to": "Bundeshaus Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "British Schools And Universities Club Of New York",
          "Britishschools And Universities Club Of New York"
        ],
        "to": "British Schools And Universities Club Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SS Amsterdam",
          "SSAmsterdam"
        ],
        "to": "SS Amsterdam"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Friendly Sons Of St Patrick",
          "Friendly Sons Of StPatrick"
        ],
        "to": "Friendly Sons Of St Patrick"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Canadian Pacific Railway Co  SS Alberta",
          "Canadian Pacific Railway Co  SSAlberta"
        ],
        "to": "Canadian Pacific Railway Co S S Alberta"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Café Des Beaux Arts",
          "Café Des Beauxarts"
        ],
        "to": "Cafe Des Beaux Arts"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Cunard LinerMS Pavonia",
          "Cunard Line RMS Pavonia"
        ],
        "to": "Cunard Line RMS Pavonia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Round Table",
          "Roundtable"
        ],
        "to": "Round Table"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  SS Southwark",
          "Red Star Line  SSSouthwark"
        ],
        "to": "Red Star Line S S Southwark"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "USS San Francisco",
          "USSSan Francisco"
        ],
        "to": "USS San Francisco"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "St George's Society Of New York",
          "StGeorge's Society Of New York"
        ],
        "to": "St Georges Society Of New York"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Menzies Hotel",
          "Menzies'hotel"
        ],
        "to": "Menzies Hotel"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York State Hotel Association",
          "Newyork State Hotel Association"
        ],
        "to": "New York State Hotel Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Business Men's League Of St Louis",
          "Business Men's League Of StLouis"
        ],
        "to": "Business Mens League Of St Louis"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Pig N'whistle",
          "Pig'n Whistle"
        ],
        "to": "Pig N Whistle"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line  Antwerpen new York",
          "Red Star Line Antwerpennew York"
        ],
        "to": "Red Star Line Antwerpen New York"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "U S S Wyoming",
          "USS Wyoming"
        ],
        "to": "USS Wyoming"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"'\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"'\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(/[.,]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(/[.,]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression grel:value.replace(\"\\\\\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "grel:value.replace(\"\\\\\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column sponsor using expression value.toTitlecase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value.toTitlecase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburgamerica Linie",
          "Hamburgamerika Line",
          "Hamburgamerican Line",
          "Hamburgamerica Line"
        ],
        "to": "Hamburg America Line"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutcher Lloyd Bremen",
          "Norddeutecher Lloyd Bremen",
          "Nordeutcher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Compagnie General Transatlantique",
          "Compagnie Generale Transatlantique",
          "Compngnie General Transatlantique"
        ],
        "to": "Compagnie General Transatlantique"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Waldorfastoria",
          "Walforf Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hamburgamerika Linie",
          "Hamburg Amerika Linie",
          "Hamburg Armerika Linie"
        ],
        "to": "Hamburg America Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutcher Lloyd Bremen",
          "Norddeutecher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Smith & Mc Nell",
          "Smith & Mc Nells",
          "Smith & Mcnell"
        ],
        "to": "Smith & McNell"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Red Star Line Antwerpen Ny",
          "Red Ster Line Antwerpen Ny",
          "Red Star Line Antwerpenny"
        ],
        "to": "Red Star Line Antwerpen NY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Jcigar Leaf Tobacco Board Of Trade Of United States",
          "Cigar Leaf Tobacco Board Of Trade Of United States"
        ],
        "to": "Cigar Leaf Tobacco Board Of Trade Of United States"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hollandamerica Line",
          "Hollandamerican Line"
        ],
        "to": "Holland America Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wiehl & Widmann",
          "Wiehl & Widman"
        ],
        "to": "Wiehl & Widmann"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Netherland",
          "Hotel Nethrland"
        ],
        "to": "Hotel Netherland"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usaarmy Transport Warren",
          "Usarmy Transport Warren"
        ],
        "to": "US Army Transport Warren"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New York Life Insurance Company",
          "New York Life Insuance Company"
        ],
        "to": "New York Life Insurance Company"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Flat Iron Restaurant",
          "Flatiron Restaurant"
        ],
        "to": "Flatiron Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Rms Queen Elilzabeth 2",
          "Rms Queen Elizabeth 2"
        ],
        "to": "Rms Queen Elilzabeth 2"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Dangleterre",
          "Hotel Dangeleterre"
        ],
        "to": "Hotel Dangleterre"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Usmsphiladelphia",
          "Usms Philadelphia"
        ],
        "to": "Usms Philadelphia"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "State Department Special To Pandamerican Congress At City Of Mexico Pullman Car Service",
          "State Department Special To Panamerican Congress At City Of Mexico Pullman Car Service"
        ],
        "to": "State Department Special To Pandamerican Congress At City Of Mexico Pullman Car Service"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "B&o Blue Line",
          "B& O Blue Line"
        ],
        "to": "B&O Blue Line"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Royal Poinciana",
          "Royal Ponciana"
        ],
        "to": "Royal Poinciana"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Ambassador",
          "Hotels Ambassador"
        ],
        "to": "Hotel Ambassador"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "New England Manufacturing Jewlers And Silversmiths Association",
          "New England Manufacturing Jewelers And Silversmiths Association"
        ],
        "to": "New England Manufacturing Jewlers And Silversmiths Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Waldorf Astoria",
          "Walforf Astoria"
        ],
        "to": "Waldorf Astoria"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Palace Hotel Restaurat And Ladies Grill Room",
          "Palace Hotel Restaurant And Ladies Grill Room"
        ],
        "to": "Palace Hotel Restaurat And Ladies Grill Room"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ritz Carlton",
          "Ritzcarlton"
        ],
        "to": "Ritz Carlton"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Pontchartrain",
          "Hotel Ponchartrain"
        ],
        "to": "Hotel Pontchartrain"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "First Panel Sheriffs Jury",
          "First Panel Sherfiffs Jury"
        ],
        "to": "First Panel Sheriffs Jury"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Bailey Catering Co",
          "Baily Catering Co"
        ],
        "to": "Bailey Catering Co"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "King Edward Vii",
          "King Endward Vii"
        ],
        "to": "King Edward VII"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Great Northern System Dining Cars",
          "Great Northern System Dining Car"
        ],
        "to": "Great Northern System Dining Cars"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Sphinx Club",
          "Sphnx Club"
        ],
        "to": "Sphinx Club"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Janssens Restaurant",
          "Jansens Restaurant"
        ],
        "to": "Janssens Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Nordeuscher Lloyd Bremen",
          "Nordeutcher Lloyd Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Hotel Mcalpin",
          "Hotel Mc Alpin"
        ],
        "to": "Hotel Mcalpin"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Schwarzwalders Natur Weinhaus",
          "Schwarzzwalders Natur Weinhaus"
        ],
        "to": "Schwarzwalders Natur Weinhaus"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Stockholm Restaurants",
          "Stockholm Restaurant"
        ],
        "to": "Stockholm Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Columbia University Restaurant",
          "Columbia University Restauant"
        ],
        "to": "Columbia University Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Norddeutscher Lloyd Bremen",
          "Norddeutscher Lloyds Bremen"
        ],
        "to": "Norddeutscher Lloyd Bremen"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column sponsor",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sponsor",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Dobbeltskrue Postdampskibet",
          "Dobbelskrue Postdampskibet"
        ],
        "to": "Dobbeltskrue Postdampskibet"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Oceanic Steamship Company Sierra",
          "Oceanic Sreamship Company Sierra"
        ],
        "to": "Oceanic Steamship Company Sierra"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Wisconsin Bankers Association",
          "Wisconsin Bankers Asociation"
        ],
        "to": "Wisconsin Bankers Association"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Aw Dennett",
          "Awdennett"
        ],
        "to": "A W Dennett"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Edward F Langs Ladies And Gents Lunch Room And Restaurant",
          "Edward F Langss Ladies And Gents Lunch Room And Restaurant"
        ],
        "to": "Edward F Langs Ladies And Gents Lunch Room And Restaurant"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "Ss New Amsterdam",
          "Ss Niew Amsterdam"
        ],
        "to": "Ss New Amsterdam"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER",
          "[DINNER]",
          "(DINNER)",
          "DINNER;",
          "DINNER (?)",
          "DINNER(?)",
          "[DINNER?]",
          "(?DINNER?)",
          "DINNER,",
          "DINNER?",
          "[?DINNER?]",
          "[DINNER ?]"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH",
          "[LUNCH]",
          "(?LUNCH?)",
          "LUNCH;",
          "[LUNCH?]",
          "(LUNCH)",
          "LUNCH (?)",
          "LUNCH."
        ],
        "to": "LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST",
          "[BREAKFAST]",
          "BREAKFAST;",
          "BREAKFAST (?)",
          "BREAKFAST(?)",
          "[BREAKFAST ?]"
        ],
        "to": "BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "(DAILY MENU)",
          "DAILY MENU;",
          "[DAILY MENU?]",
          "[DAILY] MENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER",
          "SUPPER (?)",
          "SUPPER(?)",
          "SUPPER;"
        ],
        "to": "SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CARTE DU JOUR",
          "(CARTE DU JOUR)",
          "CARTE DU JOUR;"
        ],
        "to": "CARTE DU JOUR"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH & DINNER",
          "LUNCH; DINNER",
          "[?DINNER? - LUNCH?]"
        ],
        "to": "LUNCH & DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK-BREAKFAST",
          "FRUHSTUCK/BREAKFAST",
          "FRUHSTUCK/BREAKFAST;"
        ],
        "to": "BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, DINNER",
          "DAILY DINNER MENU",
          "DAILY MENU; DINNER"
        ],
        "to": "DAILY MENU DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "A LA CARTE; DINNER",
          "DINNER A LA CARTE",
          "DINNER; A LA CARTE"
        ],
        "to": "A LA CARTE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH MENU",
          "DAILY MENU, LUNCH",
          "DAILY MENU; LUNCH"
        ],
        "to": "DAILY LUNCH MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH OR DINNER",
          "DINNER OR LUNCH",
          "LUNCH &/OR DINNER"
        ],
        "to": "LUNCH OR DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY DINNER",
          "ANNIVERSARY DINNER?",
          "ANNIVERSARY [DINNER]"
        ],
        "to": "ANNIVERSARY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN",
          "MITTAG-ESSEN",
          "MITTAGESSEN;"
        ],
        "to": "MITTAGESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP - LUNCHEON",
          "INSPECTION TRIP, LUNCHEON",
          "INSPECTION TRIP, LUNCHEON;"
        ],
        "to": "INSPECTION TRIP LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BANQUET AND RECEPTION",
          "RECEPTION AND BANQUET"
        ],
        "to": "BANQUET AND RECEPTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "TABLE DHOTE DINNER",
          "DINNER TABLE DHOTE"
        ],
        "to": "TABLE DHOTE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "AFTERNOON TEA",
          "AFTERNOON TEA ["
        ],
        "to": "AFTERNOON TEA"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER - SECOND CABIN",
          "DINNER SECOND CABIN"
        ],
        "to": "DINNER SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, DINNER",
          "INSPECTION TRIP, DINNER;"
        ],
        "to": "INSPECTION TRIP DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN/DINNER",
          "MITTAGESSEN[DINNER]"
        ],
        "to": "MITTAGESSEN DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WINE LIST",
          "WINE LIST;"
        ],
        "to": "WINE LIST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER,SECOND CABIN",
          "DINNER-SECOND CABIN"
        ],
        "to": "DINNER SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUNION",
          "[?REUNION?]"
        ],
        "to": "REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON TABLE DHOTE",
          "TABLE DHOTE LUNCHEON"
        ],
        "to": "LUNCHEON TABLE DHOTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST AND SUPPER",
          "SUPPER AND BREAKFAST"
        ],
        "to": "BREAKFAST AND SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEDDING",
          "WEDDING(?)"
        ],
        "to": "WEDDING"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "RECEPTION",
          "[RECEPTION]"
        ],
        "to": "RECEPTION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTONS BIRTHDAY BANQUET",
          "BANQUET (WASHINGTONS BIRTHDAY?)"
        ],
        "to": "WASHINGTONS BIRTHDAY BANQUET"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ABEND-ESSEN",
          "ABENDESSEN"
        ],
        "to": "ABENDESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MENU",
          "MENU;"
        ],
        "to": "MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL DINNER",
          "[ANNUAL DINNER?]"
        ],
        "to": "ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINER",
          "[DINER]"
        ],
        "to": "DINER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER TO ABOVE",
          "DINNER TO ABOVE;"
        ],
        "to": "DINNER TO ABOVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY LUNCH;",
          "DAILY LUNCH"
        ],
        "to": "DAILY LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON A LA CARTE",
          "LUNCHEON, A LA CARTE"
        ],
        "to": "LUNCHEON A LA CARTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LINCOLNS BIRTHDAY DINNER",
          "DINNER, LINCOLNS BIRTHDAY"
        ],
        "to": "LINCOLNS BIRTHDAY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FIFTH ANNUAL DINNER",
          "DINNER, FIFTH ANNUAL"
        ],
        "to": "FIFTH ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FRUHSTUCK/LUNCH",
          "FRUHSTUCK-LUNCH"
        ],
        "to": "FRUHSTUCK LUNCH"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, BREAKFAST",
          "DAILY BREAKFAST MENU"
        ],
        "to": "DAILY MENU BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, LUNCHEON",
          "DAILY LUNCHEON MENU"
        ],
        "to": "DAILY MENU LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PRIVATE DINNER",
          "[PRIVATE DINNER?]"
        ],
        "to": "PRIVATE DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP, BREAKFAST",
          "INSPECTION TRIP - BREAKFAST"
        ],
        "to": "INSPECTION TRIP BREAKFAST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN - DINNER",
          "MITTAGESSEN [DINNER]"
        ],
        "to": "MITTAGESSEN DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH-DINNER",
          "LUNCH;DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIDDAG/DINNER",
          "MIDDAG-DINNER"
        ],
        "to": "MIDDAG DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY BILL OF FARE",
          "DAILY BILL OF FARE;"
        ],
        "to": "DAILY BILL OF FARE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON",
          "[LUNCHEON]",
          "LUNCHEON;"
        ],
        "to": "LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH & DINNER",
          "LUNCH DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST (?) HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON",
          "BREAKFAST HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
        ],
        "to": "BREAKFAST HELD BY NORDEUTSCHER LLOYD BREMEN AT ON BOARD THE SS GEORGE WASHINGTON"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER/DINER",
          "DINER/DINNER",
          "DINNER, DINER"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU LUNCHEON",
          "DAILY MENU,LUNCHEON"
        ],
        "to": "DAILY MENU LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WEDDING DINNER",
          "(WEDDING)DINNER"
        ],
        "to": "WEDDING DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST - SECOND CABIN",
          "BREAKFAST-SECOND CABIN"
        ],
        "to": "BREAKFAST SECOND CABIN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST,LUNCH & DINNER",
          "BREAKFAST; LUNCH; DINNER"
        ],
        "to": "BREAKFAST LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU, SUPPER",
          "DAILY MENU,SUPPER"
        ],
        "to": "DAILY MENU SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER",
          "DINNNER"
        ],
        "to": "DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DEJEUNER FOURCHETTE/LUNCHEON",
          "DEJEUNER FOURCHETTE/ LUNCHEON"
        ],
        "to": "DEJEUNER FOURCHETTE LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "(DINNER DANCE)",
          "DINNER-DANCE"
        ],
        "to": "DINNER DANCE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOURTH OF JULY DINNER",
          "FOURTH OFJULY DINNER"
        ],
        "to": "FOURTH OF JULY DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU DINNER",
          "DAILY MENU,DINNER"
        ],
        "to": "DAILY MENU DINNER"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "WASHINGTONS BIRTHDAY",
          "WASHINGT0NS BIRTHDAY"
        ],
        "to": "WASHINGTONS BIRTHDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER",
          "SOUPER"
        ],
        "to": "SUPPER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCHEON",
          "LINCHEON"
        ],
        "to": "LUNCHEON"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH AND DINNER",
          "LUMCH AND DINNER"
        ],
        "to": "LUNCH DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "THANKSGIVING DINNER",
          "THNAKSGIVING DINNER"
        ],
        "to": "THANKSGIVING DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "CHRISTMAS DINNER",
          "CHRISTMAS DINNR"
        ],
        "to": "CHRISTMAS DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SUPPER MENU",
          "SUPPER MEN"
        ],
        "to": "SUPPER MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "INSPECTION TRIP DINNER",
          "INSPECTION TRIP - DINER"
        ],
        "to": "INSPECTION TRIP DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "BREAKFAST - A LA CARTE",
          "BREAKFAST ˆ LA CARTE"
        ],
        "to": "BREAKFAST A LA CARTE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER ˆ LA CARTE",
          "DINNER-A LA CARTE"
        ],
        "to": "DINNER A LA CARTE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DINNER A LA CARTE",
          "A LA CARTE DINNER"
        ],
        "to": "DINNER A LA CARTE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILY MENUS"
        ],
        "to": "DAILY MENU"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column event using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column event",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "event",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EIGHTH ANNUAL DINNER",
          "EIGHT ANNUAL DINNER",
          "EIGTH ANNUAL DINNER"
        ],
        "to": "EIGHTH ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU - 11;30 T0 3;00",
          "DAILY MENU - 11;30 TO 3;00",
          "DAILY MENU, TEA"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MITTAGESSEN",
          "MITAGESSEN",
          "MITTAGESEN"
        ],
        "to": "MITTAGESSEN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL DINNER",
          "12 ANNUAL DINNER"
        ],
        "to": "ANNUAL DINNER"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "LUNCH A LA CARTE",
          "LUNCH ˆ LA CARTE"
        ],
        "to": "LUNCH A LA CARTE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(/[;.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(/[;.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC POL",
          "POL SOC"
        ],
        "to": "SOC POL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COM",
          "COM}"
        ],
        "to": "COM"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC",
          "SOC:"
        ],
        "to": "SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "GOVT",
          "GOV'T"
        ],
        "to": "GOVT"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY SINGLE HOST",
          "OTHER SINGLE HOST PRIVATE PARTY"
        ],
        "to": "OTHER PRIVATE PARTY SINGLE HOST"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC COM",
          "COM SOC"
        ],
        "to": "SOC COM"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PERSONAL",
          "OTHERPERSONAL"
        ],
        "to": "OTHER PERSONAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE HOSTS",
          "OTHER PRIVATE HOST",
          "OTHER PRIVATE HOSTESS"
        ],
        "to": "OTHER PRIVATE HOSTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMERCIAL",
          "CMMERCIAL"
        ],
        "to": "COMMERCIAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE INDIVIDUAL",
          "OTHER PRIVATE INDIVIDUAL HOST"
        ],
        "to": "OTHER PRIVATE INDIVIDUAL HOST"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER INDIVIDUAL",
          "PTHER INDIVIDUAL"
        ],
        "to": "OTHER INDIVIDUAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY",
          "OTHER PRIVATE PATY"
        ],
        "to": "OTHER PRIVATE PARTY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "FOREIGN",
          "FOREIGNEIGN"
        ],
        "to": "FOREIGN"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE HOSTS",
          "OTHER TWO PRIVATE HOSTS"
        ],
        "to": "OTHER PRIVATE HOSTS"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER PRIVATE PARTY SINGLE HOST",
          "OTHER PRIVATE PARTY BY SINGLE HOST"
        ],
        "to": "OTHER PRIVATE PARTY SINGLE HOST"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column venue using expression grel:value.replace(\"NULL\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "grel:value.replace(\"NULL\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SOC"
        ],
        "to": "SOCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COM"
        ],
        "to": "COMMERCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMM"
        ],
        "to": "COMMERCIAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "EDUC"
        ],
        "to": "EDUCATIONAL"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MILIT"
        ],
        "to": "MILITARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "MIL"
        ],
        "to": "MILITARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column venue",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "venue",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "UNKNOWN"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          ";"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "?"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[;.,-]/, \" \")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[;.,-]/, \" \")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/\\[|\\]|\\?/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(\"\\\"\", \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(\"\\\"\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[()]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[()]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression value.toUppercase()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value.toUppercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column occasion using expression grel:value.replace(/[{}]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "grel:value.replace(/[{}]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER DAILY DATED MENU",
          "OTHER DATED DAILY MENU"
        ],
        "to": "OTHER DAILY DATED MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "PATRIOTIC HOLIDAY",
          "PATRIOTIC HOLIDAY HOLIDAY"
        ],
        "to": "PATRIOTIC HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECULAR HOLIDAY",
          "SECULAR HOLIDAY HOLIDAY"
        ],
        "to": "SECULAR HOLIDAY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "DAILY MENU",
          "DAILYMENU"
        ],
        "to": "DAILY MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "REUNION",
          "RE UNION"
        ],
        "to": "REUNION"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "OTHER S0C",
          "OTHR SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "ANIVERSARY"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMPL",
          "C0MPL"
        ],
        "to": "COMPL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY COMP",
          "ANNIVERSARY/COMPL"
        ],
        "to": "ANNIVERSARY COMP"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "NULL"
        ],
        "to": ""
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIV",
          "ANIV"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORTIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNUAL",
          "AMNNUAL"
        ],
        "to": "ANNUAL"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER DAILY HOTEL MENU",
          "OTHEER DAILY HOTEL MENU"
        ],
        "to": "OTHER DAILY HOTEL MENU"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "113 ANNIVERSARY"
        ],
        "to": "ANNIVERSARY"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATION",
          "OTHER COMMEMOATION"
        ],
        "to": "OTHER COMMEMORATION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMOATIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER ANNIV",
          "0THER ANNIV"
        ],
        "to": "OTHER ANNIV"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "0THER SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORATIE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER SOC",
          "OHER SOC"
        ],
        "to": "OTHER SOC"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER ANNIVERSARY",
          "OTHER ANNIVERARY"
        ],
        "to": "OTHER ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARYERSARY",
          "ANNIVERSARYESARY"
        ],
        "to": "ANNIVERSARYERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "0THER COMMEMORATIVE"
        ],
        "to": "OTHER COMMEMORATIVE"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "SECULAR HOLIDAY",
          "SECULAR HOLIDAYL"
        ],
        "to": "SECULAR HOLIDAY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER REUNION",
          "OTHER REUNTION"
        ],
        "to": "OTHER REUNION"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "COMMEMOATIVE",
          "COMMEMORATIVE"
        ],
        "to": "COMMEMOATIVE"
      }
    ]
  },
  {
    "op": "core/mass-edit",
    "description": "Mass edit cells in column occasion",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "occasion",
    "expression": "value",
    "edits": [
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "ANNIVERSARY",
          "ANNIVERSARYERSARY"
        ],
        "to": "ANNIVERSARY"
      },
      {
        "fromBlank": false,
        "fromError": false,
        "from": [
          "OTHER COMMEMORATIVE",
          "OTHER COMMEMORATION"
        ],
        "to": "OTHER COMMEMORATIVE"
      }
    ]
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[-.,;]/, \"\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[-.,;]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toLowercase()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toLowercase()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/copy\\s*\\d+\\b/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/copy\\s*\\d+\\b/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"o\", \"0\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"o\", \"0\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[il]/, \"1\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[il]/, \"1\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/[=\\/]/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/[=\\/]/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"s0ete\", \"soete\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"s0ete\", \"soete\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"(2 c0p1es)\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"(2 c0p1es)\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/1tem.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/1tem.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/0vers1.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/0vers1.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(/thru.+/, \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(/thru.+/, \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\" &2\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\" &2\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"_w0tm\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"_w0tm\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression value.toNumber()",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\" (3 c0p1es)\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\" (3 c0p1es)\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"ab\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"ab\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column call_number using expression grel:value.replace(\"ac\", \"\")",
    "engineConfig": {
      "facets": [
        {
          "type": "range",
          "name": "call_number",
          "expression": "value",
          "columnName": "call_number",
          "from": 0,
          "to": 200000000,
          "selectNumeric": false,
          "selectNonNumeric": true,
          "selectError": true,
          "selectBlank": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "call_number",
    "expression": "grel:value.replace(\"ac\", \"\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-removal",
    "description": "Remove column keywords",
    "columnName": "keywords"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column language",
    "columnName": "language"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column place using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "place",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.trim()",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column location using expression value.replace(/\\s+/,' ')",
    "engineConfig": {
      "facets": [
        {
          "type": "timerange",
          "name": "date",
          "expression": "value",
          "columnName": "date",
          "selectTime": true,
          "selectNonTime": true,
          "selectBlank": false,
          "selectError": true,
          "from": -56165875200000,
          "to": -4473770400000
        }
      ],
      "mode": "row-based"
    },
    "columnName": "location",
    "expression": "value.replace(/\\s+/,' ')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column date using expression value.toDate()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "date",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column page_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "page_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column dish_count using expression value.toNumber()",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dish_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  }
]